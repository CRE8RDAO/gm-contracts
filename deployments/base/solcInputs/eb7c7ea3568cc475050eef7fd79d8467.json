{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ERC20.sol\";\nimport \"../../utils/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/BondDepository.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n  function policy() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function policy() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyPolicy() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ERC20 is IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // TODO comment actual hash value.\r\n    bytes32 constant private ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256( \"ERC20Token\" );\r\n    \r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string internal _name;\r\n    \r\n    string internal _symbol;\r\n    \r\n    uint8 internal _decimals;\r\n\r\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account_, uint256 ammount_) internal virtual {\r\n        require(account_ != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address( this ), account_, ammount_);\r\n        _totalSupply = _totalSupply.add(ammount_);\r\n        _balances[account_] = _balances[account_].add(ammount_);\r\n        emit Transfer(address( this ), account_, ammount_);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n  function _beforeTokenTransfer( address from_, address to_, uint256 amount_ ) internal virtual { }\r\n}\r\n\r\ninterface IERC2612Permit {\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\r\n    using Counters for Counters.Counter;\r\n\r\n    mapping(address => Counters.Counter) private _nonces;\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    constructor() {\r\n        uint256 chainID;\r\n        assembly {\r\n            chainID := chainid()\r\n        }\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name())),\r\n                keccak256(bytes(\"1\")), // Version\r\n                chainID,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual override {\r\n        require(block.timestamp <= deadline, \"Permit: expired deadline\");\r\n\r\n        bytes32 hashStruct =\r\n            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline));\r\n\r\n        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\r\n\r\n        address signer = ecrecover(_hash, v, r, s);\r\n        require(signer != address(0) && signer == owner, \"ZeroSwapPermit: Invalid signature\");\r\n\r\n        _nonces[owner].increment();\r\n        _approve(owner, spender, amount);\r\n    }\r\n\r\n    function nonces(address owner) public view override returns (uint256) {\r\n        return _nonces[owner].current();\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function fullDiv(\r\n        uint256 l,\r\n        uint256 h,\r\n        uint256 d\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2 = d & -d;\r\n        d /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        return l * r;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n        uint256 mm = mulmod(x, y, d);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n        require(h < d, 'FullMath::mulDiv: overflow');\r\n        return fullDiv(l, h, d);\r\n    }\r\n}\r\n\r\nlibrary FixedPoint {\r\n\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\r\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\r\n\r\n        return uint(self._x) / 5192296858534827;\r\n    }\r\n\r\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\r\n        if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n        if (numerator <= uint144(-1)) {\r\n            uint256 result = (numerator << RESOLUTION) / denominator;\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        } else {\r\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITreasury {\r\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( bool );\r\n    function valueOf( address _token, uint _amount ) external view returns ( uint value_ );\r\n}\r\n\r\ninterface IBondCalculator {\r\n    function valuation( address _LP, uint _amount ) external view returns ( uint );\r\n    function markdown( address _LP ) external view returns ( uint );\r\n}\r\n\r\ninterface IStaking {\r\n    function stake( uint _amount, address _recipient ) external returns ( bool );\r\n}\r\n\r\ninterface IStakingHelper {\r\n    function stake( uint _amount, address _recipient ) external;\r\n}\r\n\r\ncontract OlympusBondDepository is Ownable {\r\n\r\n    using FixedPoint for *;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n\r\n\r\n\r\n    /* ======== EVENTS ======== */\r\n\r\n    event BondCreated( uint deposit, uint indexed payout, uint indexed expires, uint indexed priceInUSD );\r\n    event BondRedeemed( address indexed recipient, uint payout, uint remaining );\r\n    event BondPriceChanged( uint indexed priceInUSD, uint indexed internalPrice, uint indexed debtRatio );\r\n    event ControlVariableAdjustment( uint initialBCV, uint newBCV, uint adjustment, bool addition );\r\n\r\n\r\n\r\n\r\n    /* ======== STATE VARIABLES ======== */\r\n\r\n    address public immutable OHM; // token given as payment for bond\r\n    address public immutable principle; // token used to create bond\r\n    address public immutable treasury; // mints OHM when receives principle\r\n    address public immutable DAO; // receives profit share from bond\r\n\r\n    bool public immutable isLiquidityBond; // LP and Reserve bonds are treated slightly different\r\n    address public immutable bondCalculator; // calculates value of LP tokens\r\n\r\n    address public staking; // to auto-stake payout\r\n    address public stakingHelper; // to stake and claim if no staking warmup\r\n    bool public useHelper;\r\n\r\n    Terms public terms; // stores terms for new bonds\r\n    Adjust public adjustment; // stores adjustment to BCV data\r\n\r\n    mapping( address => Bond ) public bondInfo; // stores bond information for depositors\r\n\r\n    uint public totalDebt; // total value of outstanding bonds; used for pricing\r\n    uint public lastDecay; // reference block timestamp for debt decay\r\n\r\n\r\n\r\n\r\n    /* ======== STRUCTS ======== */\r\n\r\n    // Info for creating new bonds\r\n    struct Terms {\r\n        uint controlVariable; // scaling variable for price\r\n        uint vestingTerm; // in seconds\r\n        uint minimumPrice; // vs principle value\r\n        uint maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\r\n        uint fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\r\n        uint maxDebt; // 9 decimal debt ratio, max % total supply created as debt\r\n    }\r\n\r\n    // Info for bond holder\r\n    struct Bond {\r\n        uint payout; // OHM remaining to be paid\r\n        uint vesting; // Blocks left to vest\r\n        uint lastTime; // Last interaction\r\n        uint pricePaid; // In DAI, for front end viewing\r\n    }\r\n\r\n    // Info for incremental adjustments to control variable\r\n    struct Adjust {\r\n        bool add; // addition or subtraction\r\n        uint rate; // increment\r\n        uint target; // BCV when adjustment finished\r\n        uint buffer; // minimum length (in seconds) between adjustments\r\n        uint lastTime; // time when last adjustment made\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ======== INITIALIZATION ======== */\r\n\r\n    constructor ( \r\n        address _OHM,\r\n        address _principle,\r\n        address _treasury, \r\n        address _DAO, \r\n        address _bondCalculator\r\n    ) {\r\n        require( _OHM != address(0) );\r\n        OHM = _OHM;\r\n        require( _principle != address(0) );\r\n        principle = _principle;\r\n        require( _treasury != address(0) );\r\n        treasury = _treasury;\r\n        require( _DAO != address(0) );\r\n        DAO = _DAO;\r\n        // bondCalculator should be address(0) if not LP bond\r\n        bondCalculator = _bondCalculator;\r\n        isLiquidityBond = ( _bondCalculator != address(0) );\r\n    }\r\n\r\n    /**\r\n     *  @notice initializes bond parameters\r\n     *  @param _controlVariable uint\r\n     *  @param _vestingTerm uint\r\n     *  @param _minimumPrice uint\r\n     *  @param _maxPayout uint\r\n     *  @param _fee uint\r\n     *  @param _maxDebt uint\r\n     *  @param _initialDebt uint\r\n     */\r\n    function initializeBondTerms( \r\n        uint _controlVariable, \r\n        uint _vestingTerm,\r\n        uint _minimumPrice,\r\n        uint _maxPayout,\r\n        uint _fee,\r\n        uint _maxDebt,\r\n        uint _initialDebt\r\n    ) external onlyPolicy() {\r\n        require( terms.controlVariable == 0, \"Bonds must be initialized from 0\" );\r\n        terms = Terms ({\r\n            controlVariable: _controlVariable,\r\n            vestingTerm: _vestingTerm,\r\n            minimumPrice: _minimumPrice,\r\n            maxPayout: _maxPayout,\r\n            fee: _fee,\r\n            maxDebt: _maxDebt\r\n        });\r\n        totalDebt = _initialDebt;\r\n        lastDecay = block.timestamp;\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ======== POLICY FUNCTIONS ======== */\r\n\r\n    enum PARAMETER { VESTING, PAYOUT, FEE, DEBT }\r\n    /**\r\n     *  @notice set parameters for new bonds\r\n     *  @param _parameter PARAMETER\r\n     *  @param _input uint\r\n     */\r\n    function setBondTerms ( PARAMETER _parameter, uint _input ) external onlyPolicy() {\r\n        if ( _parameter == PARAMETER.VESTING ) { // 0\r\n            require( _input >= 129600, \"Vesting must be longer than 36 hours\" );\r\n            terms.vestingTerm = _input;\r\n        } else if ( _parameter == PARAMETER.PAYOUT ) { // 1\r\n            require( _input <= 1000, \"Payout cannot be above 1 percent\" );\r\n            terms.maxPayout = _input;\r\n        } else if ( _parameter == PARAMETER.FEE ) { // 2\r\n            require( _input <= 10000, \"DAO fee cannot exceed payout\" );\r\n            terms.fee = _input;\r\n        } else if ( _parameter == PARAMETER.DEBT ) { // 3\r\n            terms.maxDebt = _input;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice set control variable adjustment\r\n     *  @param _addition bool\r\n     *  @param _increment uint\r\n     *  @param _target uint\r\n     *  @param _buffer uint\r\n     */\r\n    function setAdjustment ( \r\n        bool _addition,\r\n        uint _increment, \r\n        uint _target,\r\n        uint _buffer \r\n    ) external onlyPolicy() {\r\n        require( _increment <= terms.controlVariable.mul( 25 ).div( 1000 ), \"Increment too large\" );\r\n\r\n        adjustment = Adjust({\r\n            add: _addition,\r\n            rate: _increment,\r\n            target: _target,\r\n            buffer: _buffer,\r\n            lastTime: block.timestamp\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  @notice set contract for auto stake\r\n     *  @param _staking address\r\n     *  @param _helper bool\r\n     */\r\n    function setStaking( address _staking, bool _helper ) external onlyPolicy() {\r\n        require( _staking != address(0) );\r\n        if ( _helper ) {\r\n            useHelper = true;\r\n            stakingHelper = _staking;\r\n        } else {\r\n            useHelper = false;\r\n            staking = _staking;\r\n        }\r\n    }\r\n\r\n\r\n    \r\n\r\n    /* ======== USER FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice deposit bond\r\n     *  @param _amount uint\r\n     *  @param _maxPrice uint\r\n     *  @param _depositor address\r\n     *  @return uint\r\n     */\r\n    function deposit( \r\n        uint _amount, \r\n        uint _maxPrice,\r\n        address _depositor\r\n    ) external returns ( uint ) {\r\n        require( _depositor != address(0), \"Invalid address\" );\r\n\r\n        decayDebt();\r\n        require( totalDebt <= terms.maxDebt, \"Max capacity reached\" );\r\n        \r\n        uint priceInUSD = bondPriceInUSD(); // Stored in bond info\r\n        uint nativePrice = _bondPrice();\r\n\r\n        require( _maxPrice >= nativePrice, \"Slippage limit: more than max price\" ); // slippage protection\r\n\r\n        uint value = ITreasury( treasury ).valueOf( principle, _amount );\r\n        uint payout = payoutFor( value ); // payout to bonder is computed\r\n\r\n        require( payout >= 10000000, \"Bond too small\" ); // must be > 0.01 OHM ( underflow protection )\r\n        require( payout <= maxPayout(), \"Bond too large\"); // size protection because there is no slippage\r\n\r\n        // profits are calculated\r\n        uint fee = payout.mul( terms.fee ).div( 10000 );\r\n        uint profit = value.sub( payout ).sub( fee );\r\n\r\n        /**\r\n            principle is transferred in\r\n            approved and\r\n            deposited into the treasury, returning (_amount - profit) OHM\r\n         */\r\n        IERC20( principle ).safeTransferFrom( msg.sender, address(this), _amount );\r\n        IERC20( principle ).approve( address( treasury ), _amount );\r\n        ITreasury( treasury ).deposit( _amount, principle, profit );\r\n        \r\n        if ( fee != 0 ) { // fee is transferred to dao \r\n            IERC20( OHM ).safeTransfer( DAO, fee ); \r\n        }\r\n        \r\n        // total debt is increased\r\n        totalDebt = totalDebt.add( value ); \r\n                \r\n        // depositor info is stored\r\n        bondInfo[ _depositor ] = Bond({ \r\n            payout: bondInfo[ _depositor ].payout.add( payout ),\r\n            vesting: terms.vestingTerm,\r\n            lastTime: block.timestamp,\r\n            pricePaid: priceInUSD\r\n        });\r\n\r\n        // indexed events are emitted\r\n        emit BondCreated( _amount, payout, block.timestamp.add( terms.vestingTerm ), priceInUSD );\r\n        emit BondPriceChanged( bondPriceInUSD(), _bondPrice(), debtRatio() );\r\n\r\n        adjust(); // control variable is adjusted\r\n        return payout; \r\n    }\r\n\r\n    /** \r\n     *  @notice redeem bond for user\r\n     *  @param _recipient address\r\n     *  @param _stake bool\r\n     *  @return uint\r\n     */ \r\n    function redeem( address _recipient, bool _stake ) external returns ( uint ) {        \r\n        Bond memory info = bondInfo[ _recipient ];\r\n        uint percentVested = percentVestedFor( _recipient ); // (blocks since last interaction / vesting term remaining)\r\n\r\n        if ( percentVested >= 10000 ) { // if fully vested\r\n            delete bondInfo[ _recipient ]; // delete user info\r\n            emit BondRedeemed( _recipient, info.payout, 0 ); // emit bond data\r\n            return stakeOrSend( _recipient, _stake, info.payout ); // pay user everything due\r\n\r\n        } else { // if unfinished\r\n            // calculate payout vested\r\n            uint payout = info.payout.mul( percentVested ).div( 10000 );\r\n\r\n            // store updated deposit info\r\n            bondInfo[ _recipient ] = Bond({\r\n                payout: info.payout.sub( payout ),\r\n                vesting: info.vesting.sub( block.timestamp.sub( info.lastTime ) ),\r\n                lastTime: block.timestamp,\r\n                pricePaid: info.pricePaid\r\n            });\r\n\r\n            emit BondRedeemed( _recipient, payout, bondInfo[ _recipient ].payout );\r\n            return stakeOrSend( _recipient, _stake, payout );\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice allow user to stake payout automatically\r\n     *  @param _stake bool\r\n     *  @param _amount uint\r\n     *  @return uint\r\n     */\r\n    function stakeOrSend( address _recipient, bool _stake, uint _amount ) internal returns ( uint ) {\r\n        if ( !_stake ) { // if user does not want to stake\r\n            IERC20( OHM ).transfer( _recipient, _amount ); // send payout\r\n        } else { // if user wants to stake\r\n            if ( useHelper ) { // use if staking warmup is 0\r\n                IERC20( OHM ).approve( stakingHelper, _amount );\r\n                IStakingHelper( stakingHelper ).stake( _amount, _recipient );\r\n            } else {\r\n                IERC20( OHM ).approve( staking, _amount );\r\n                IStaking( staking ).stake( _amount, _recipient );\r\n            }\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n     *  @notice makes incremental adjustment to control variable\r\n     */\r\n    function adjust() internal {\r\n        uint timeCanAdjust = adjustment.lastTime.add( adjustment.buffer );\r\n        if( adjustment.rate != 0 && block.timestamp >= timeCanAdjust ) {\r\n            uint initial = terms.controlVariable;\r\n            if ( adjustment.add ) {\r\n                terms.controlVariable = terms.controlVariable.add( adjustment.rate );\r\n                if ( terms.controlVariable >= adjustment.target ) {\r\n                    adjustment.rate = 0;\r\n                }\r\n            } else {\r\n                terms.controlVariable = terms.controlVariable.sub( adjustment.rate );\r\n                if ( terms.controlVariable <= adjustment.target ) {\r\n                    adjustment.rate = 0;\r\n                }\r\n            }\r\n            adjustment.lastTime = block.timestamp;\r\n            emit ControlVariableAdjustment( initial, terms.controlVariable, adjustment.rate, adjustment.add );\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice reduce total debt\r\n     */\r\n    function decayDebt() internal {\r\n        totalDebt = totalDebt.sub( debtDecay() );\r\n        lastDecay = block.timestamp;\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ======== VIEW FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice determine maximum bond size\r\n     *  @return uint\r\n     */\r\n    function maxPayout() public view returns ( uint ) {\r\n        return IERC20( OHM ).totalSupply().mul( terms.maxPayout ).div( 100000 );\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate interest due for new bond\r\n     *  @param _value uint\r\n     *  @return uint\r\n     */\r\n    function payoutFor( uint _value ) public view returns ( uint ) {\r\n        return FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e16 );\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate current bond premium\r\n     *  @return price_ uint\r\n     */\r\n    function bondPrice() public view returns ( uint price_ ) {        \r\n        price_ = terms.controlVariable.mul( debtRatio() ).add( 1000000000 ).div( 1e7 );\r\n        if ( price_ < terms.minimumPrice ) {\r\n            price_ = terms.minimumPrice;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate current bond price and remove floor if above\r\n     *  @return price_ uint\r\n     */\r\n    function _bondPrice() internal returns ( uint price_ ) {\r\n        price_ = terms.controlVariable.mul( debtRatio() ).add( 1000000000 ).div( 1e7 );\r\n        if ( price_ < terms.minimumPrice ) {\r\n            price_ = terms.minimumPrice;        \r\n        } else if ( terms.minimumPrice != 0 ) {\r\n            terms.minimumPrice = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice converts bond price to DAI value\r\n     *  @return price_ uint\r\n     */\r\n    function bondPriceInUSD() public view returns ( uint price_ ) {\r\n        if( isLiquidityBond ) {\r\n            price_ = bondPrice().mul( IBondCalculator( bondCalculator ).markdown( principle ) ).div( 100 );\r\n        } else {\r\n            price_ = bondPrice().mul( 10 ** IERC20( principle ).decimals() ).div( 100 );\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate current ratio of debt to OHM supply\r\n     *  @return debtRatio_ uint\r\n     */\r\n    function debtRatio() public view returns ( uint debtRatio_ ) {   \r\n        uint supply = IERC20( OHM ).totalSupply();\r\n        debtRatio_ = FixedPoint.fraction( \r\n            currentDebt().mul( 1e9 ), \r\n            supply\r\n        ).decode112with18().div( 1e18 );\r\n    }\r\n\r\n    /**\r\n     *  @notice debt ratio in same terms for reserve or liquidity bonds\r\n     *  @return uint\r\n     */\r\n    function standardizedDebtRatio() external view returns ( uint ) {\r\n        if ( isLiquidityBond ) {\r\n            return debtRatio().mul( IBondCalculator( bondCalculator ).markdown( principle ) ).div( 1e9 );\r\n        } else {\r\n            return debtRatio();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate debt factoring in decay\r\n     *  @return uint\r\n     */\r\n    function currentDebt() public view returns ( uint ) {\r\n        return totalDebt.sub( debtDecay() );\r\n    }\r\n\r\n    /**\r\n     *  @notice amount to decay total debt by\r\n     *  @return decay_ uint\r\n     */\r\n    function debtDecay() public view returns ( uint decay_ ) {\r\n        uint timeSinceLast = block.timestamp.sub( lastDecay );\r\n        decay_ = totalDebt.mul( timeSinceLast ).div( terms.vestingTerm );\r\n        if ( decay_ > totalDebt ) {\r\n            decay_ = totalDebt;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate how far into vesting a depositor is\r\n     *  @param _depositor address\r\n     *  @return percentVested_ uint\r\n     */\r\n    function percentVestedFor( address _depositor ) public view returns ( uint percentVested_ ) {\r\n        Bond memory bond = bondInfo[ _depositor ];\r\n        uint secondsSinceLast = block.timestamp.sub( bond.lastTime );\r\n        uint vesting = bond.vesting;\r\n\r\n        if ( vesting > 0 ) {\r\n            percentVested_ = secondsSinceLast.mul( 10000 ).div( vesting );\r\n        } else {\r\n            percentVested_ = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate amount of OHM available for claim by depositor\r\n     *  @param _depositor address\r\n     *  @return pendingPayout_ uint\r\n     */\r\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ ) {\r\n        uint percentVested = percentVestedFor( _depositor );\r\n        uint payout = bondInfo[ _depositor ].payout;\r\n\r\n        if ( percentVested >= 10000 ) {\r\n            pendingPayout_ = payout;\r\n        } else {\r\n            pendingPayout_ = payout.mul( percentVested ).div( 10000 );\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ======= AUXILLIARY ======= */\r\n\r\n    /**\r\n     *  @notice allow anyone to send lost tokens (excluding principle or OHM) to the DAO\r\n     *  @return bool\r\n     */\r\n    function recoverLostToken( address _token ) external returns ( bool ) {\r\n        require( _token != OHM );\r\n        require( _token != principle );\r\n        IERC20( _token ).safeTransfer( DAO, IERC20( _token ).balanceOf( address(this) ) );\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/BrickFarming.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract BrickFarming is Ownable, ReentrancyGuard, Pausable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n        uint256 pendingRewards;\r\n        uint256 lastClaim;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 stakedToken;\r\n        uint256 allocPoint;\r\n        uint256 accTokenPerShare;\r\n        uint256 lockupDuration;\r\n        uint256 totalAmount;\r\n    }\r\n\r\n    IERC20 public rewardToken;\r\n\r\n    PoolInfo[] public poolInfo;\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    uint256 public totalAllocPoint;\r\n\r\n    mapping(address => bool) private isPoolAdded;\r\n\r\n    // 5% fee when users withdraw within 3 days\r\n    uint256 public emergencyWithdrawFee = 500;\r\n    uint256 public constant FEE_MULTIPLIER = 10000;\r\n    // fee container\r\n    address public treasury;\r\n\r\n    uint256 public constant SHARE_MULTIPLIER = 1e12;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Claim(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event PoolAdded(\r\n        uint256 indexed index,\r\n        address indexed stakedToken,\r\n        uint256 allocPoint,\r\n        uint256 lockupDuration\r\n    );\r\n    event PoolUpdated(uint256 indexed index, uint256 allocPoint);\r\n    event TreasuryUpdated(address indexed treasury);\r\n    event EmergencyWithdrawFeeUpdated(uint256 emergencyWithdrawFee);\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    constructor(IERC20 _rewardToken, address _treasury) {\r\n        require(\r\n            address(_rewardToken) != address(0),\r\n            \"BrickFarm: Invalid rewardToken address\"\r\n        );\r\n        require(\r\n            address(_treasury) != address(0),\r\n            \"BrickFarm: Invalid treasury address\"\r\n        );\r\n\r\n        rewardToken = _rewardToken;\r\n        treasury = _treasury;\r\n\r\n        emit TreasuryUpdated(_treasury);\r\n        emit EmergencyWithdrawFeeUpdated(emergencyWithdrawFee);\r\n    }\r\n\r\n    modifier validatePoolByPid(uint256 _pid) {\r\n        require(_pid < poolInfo.length, \"BrickFarm: Pool does not exist\");\r\n        _;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function pendingReward(uint256 _pid, address _user)\r\n        public\r\n        view\r\n        validatePoolByPid(_pid)\r\n        returns (uint256)\r\n    {\r\n        require(_user != address(0), \"BrickFarm: Invalid address\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n\r\n        return\r\n            user\r\n                .amount\r\n                .mul(pool.accTokenPerShare)\r\n                .div(SHARE_MULTIPLIER)\r\n                .add(user.pendingRewards)\r\n                .sub(user.rewardDebt);\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256 _amount)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        validatePoolByPid(_pid)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        uint256 pendingRewards = pendingReward(_pid, msg.sender);\r\n        if (pendingRewards > 0) {\r\n            uint256 sentRewards = safeTokenTransfer(msg.sender, pendingRewards);\r\n            emit Claim(msg.sender, _pid, sentRewards);\r\n            user.pendingRewards = pendingRewards.sub(sentRewards);\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            pool.stakedToken.safeTransferFrom(\r\n                address(msg.sender),\r\n                address(this),\r\n                _amount\r\n            );\r\n\r\n            user.amount = user.amount.add(_amount);\r\n            user.lastClaim = block.timestamp;\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(\r\n            SHARE_MULTIPLIER\r\n        );\r\n        pool.totalAmount = pool.totalAmount.add(_amount);\r\n\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        validatePoolByPid(_pid)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        require(user.amount >= _amount, \"BrickFarm: Invalid withdraw amount\");\r\n\r\n        uint256 feeAmount;\r\n        if (block.timestamp < user.lastClaim.add(pool.lockupDuration)) {\r\n            feeAmount = _amount.mul(emergencyWithdrawFee).div(FEE_MULTIPLIER);\r\n        }\r\n\r\n        uint256 pendingRewards = pendingReward(_pid, msg.sender);\r\n        if (pendingRewards > 0) {\r\n            uint256 sentRewards = safeTokenTransfer(msg.sender, pendingRewards);\r\n            emit Claim(msg.sender, _pid, sentRewards);\r\n            user.pendingRewards = pendingRewards.sub(sentRewards);\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            user.lastClaim = block.timestamp;\r\n\r\n            pool.stakedToken.safeTransfer(\r\n                address(msg.sender),\r\n                _amount.sub(feeAmount)\r\n            );\r\n\r\n            if (feeAmount > 0) {\r\n                pool.stakedToken.safeTransfer(treasury, feeAmount);\r\n            }\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(\r\n            SHARE_MULTIPLIER\r\n        );\r\n        pool.totalAmount = pool.totalAmount.sub(_amount);\r\n\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function safeTokenTransfer(address _to, uint256 _amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 rewardTokenBal = rewardToken.balanceOf(address(this));\r\n        if (_amount > rewardTokenBal) {\r\n            rewardToken.safeTransfer(_to, rewardTokenBal);\r\n            return rewardTokenBal;\r\n        } else {\r\n            rewardToken.safeTransfer(_to, _amount);\r\n            return _amount;\r\n        }\r\n    }\r\n\r\n    function depositReward(uint256 _amount) external {\r\n        require(_amount > 0, \"BrickFarm: Invalid amount\");\r\n\r\n        rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            PoolInfo storage pool = poolInfo[pid];\r\n\r\n            pool.accTokenPerShare = pool.accTokenPerShare.add(\r\n                _amount.mul(pool.allocPoint).mul(SHARE_MULTIPLIER).div(\r\n                    totalAllocPoint.mul(pool.totalAmount)\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _stakedToken,\r\n        uint256 _lockupDuration\r\n    ) external onlyOwner {\r\n        require(\r\n            !isPoolAdded[address(_stakedToken)],\r\n            \"BrickFarm: There's already a pool with that token!\"\r\n        );\r\n\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                stakedToken: _stakedToken,\r\n                allocPoint: _allocPoint,\r\n                accTokenPerShare: 0,\r\n                lockupDuration: _lockupDuration,\r\n                totalAmount: 0\r\n            })\r\n        );\r\n\r\n        isPoolAdded[address(_stakedToken)] = true;\r\n\r\n        emit PoolAdded(\r\n            poolInfo.length - 1,\r\n            address(_stakedToken),\r\n            _allocPoint,\r\n            _lockupDuration\r\n        );\r\n    }\r\n\r\n    function set(uint256 _pid, uint256 _allocPoint)\r\n        external\r\n        onlyOwner\r\n        validatePoolByPid(_pid)\r\n    {\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint).sub(\r\n            poolInfo[_pid].allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n\r\n        emit PoolUpdated(_pid, _allocPoint);\r\n    }\r\n\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        require(\r\n            address(_treasury) != address(0),\r\n            \"BrickFarm: Invalid treasury address\"\r\n        );\r\n\r\n        treasury = _treasury;\r\n\r\n        TreasuryUpdated(_treasury);\r\n    }\r\n\r\n    function setEmergencyWithdrawFee(uint256 _emergencyWithdrawFee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _emergencyWithdrawFee <= 1000,\r\n            \"BrickFarm: Fee's upper limit is 10%\"\r\n        );\r\n\r\n        emergencyWithdrawFee = _emergencyWithdrawFee;\r\n\r\n        emit EmergencyWithdrawFeeUpdated(_emergencyWithdrawFee);\r\n    }\r\n\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _pause();\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner whenPaused {\r\n        _unpause();\r\n        emit Unpause();\r\n    }\r\n}\r\n"
    },
    "contracts/CVXBondDepository.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n  function policy() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function policy() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyPolicy() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function fullDiv(\r\n        uint256 l,\r\n        uint256 h,\r\n        uint256 d\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2 = d & -d;\r\n        d /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        return l * r;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n        uint256 mm = mulmod(x, y, d);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n        require(h < d, 'FullMath::mulDiv: overflow');\r\n        return fullDiv(l, h, d);\r\n    }\r\n}\r\n\r\nlibrary FixedPoint {\r\n\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\r\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\r\n\r\n        return uint(self._x) / 5192296858534827;\r\n    }\r\n\r\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\r\n        if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n        if (numerator <= uint144(-1)) {\r\n            uint256 result = (numerator << RESOLUTION) / denominator;\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        } else {\r\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITreasury {\r\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( bool );\r\n    function valueOf( address _token, uint _amount ) external view returns ( uint value_ );\r\n    function mintRewards( address _recipient, uint _amount ) external;\r\n}\r\n\r\ninterface IStaking {\r\n    function stake( uint _amount, address _recipient ) external returns ( bool );\r\n}\r\n\r\ninterface IStakingHelper {\r\n    function stake( uint _amount, address _recipient ) external;\r\n}\r\n\r\ncontract OlympusCVXBondDepository is Ownable {\r\n\r\n    using FixedPoint for *;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    /* ======== EVENTS ======== */\r\n\r\n    event BondCreated( uint deposit, uint indexed payout, uint indexed expires, uint indexed priceInUSD );\r\n    event BondRedeemed( address indexed recipient, uint payout, uint remaining );\r\n    event BondPriceChanged( uint indexed internalPrice, uint indexed debtRatio );\r\n    event ControlVariableAdjustment( uint initialBCV, uint newBCV, uint adjustment, bool addition );\r\n\r\n\r\n    /* ======== STATE VARIABLES ======== */\r\n\r\n    address public immutable OHM; // token given as payment for bond\r\n    address public immutable principal; // token used to create bond\r\n    address public immutable treasury; // mints OHM when receives principal\r\n    address public immutable DAO; // receives profit share from bond\r\n\r\n    address public staking; // to auto-stake payout\r\n    address public stakingHelper; // to stake and claim if no staking warmup\r\n    bool public useHelper;\r\n\r\n    Terms public terms; // stores terms for new bonds\r\n    Adjust public adjustment; // stores adjustment to BCV data\r\n\r\n    mapping( address => Bond ) public bondInfo; // stores bond information for depositors\r\n\r\n    uint public totalDebt; // total value of outstanding bonds; used for pricing\r\n    uint public lastDecay; // reference block for debt decay\r\n    \r\n\r\n    /* ======== STRUCTS ======== */\r\n\r\n    // Info for creating new bonds\r\n    struct Terms {\r\n        uint controlVariable; // scaling variable for price\r\n        uint vestingTerm; // in blocks\r\n        uint minimumPrice; // vs principal value. 4 decimals (1500 = 0.15)\r\n        uint maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\r\n        uint maxDebt; // 9 decimal debt ratio, max % total supply created as debt\r\n    }\r\n\r\n    // Info for bond holder\r\n    struct Bond {\r\n        uint payout; // OHM remaining to be paid\r\n        uint vesting; // Blocks left to vest\r\n        uint lastBlock; // Last interaction\r\n        uint pricePaid; // In DAI, for front end viewing\r\n    }\r\n\r\n    // Info for incremental adjustments to control variable \r\n    struct Adjust {\r\n        bool add; // addition or subtraction\r\n        uint rate; // increment\r\n        uint target; // BCV when adjustment finished\r\n        uint buffer; // minimum length (in blocks) between adjustments\r\n        uint lastBlock; // block when last adjustment made\r\n    }\r\n\r\n\r\n    /* ======== INITIALIZATION ======== */\r\n\r\n    constructor ( \r\n        address _OHM,\r\n        address _principal,\r\n        address _treasury, \r\n        address _DAO\r\n    ) {\r\n        require( _OHM != address(0) );\r\n        OHM = _OHM;\r\n        require( _principal != address(0) );\r\n        principal = _principal;\r\n        require( _treasury != address(0) );\r\n        treasury = _treasury;\r\n        require( _DAO != address(0) );\r\n        DAO = _DAO;\r\n    }\r\n\r\n    /**\r\n     *  @notice initializes bond parameters\r\n     *  @param _controlVariable uint\r\n     *  @param _vestingTerm uint\r\n     *  @param _minimumPrice uint\r\n     *  @param _maxPayout uint\r\n     *  @param _maxDebt uint\r\n     *  @param _initialDebt uint\r\n     */\r\n    function initializeBondTerms( \r\n        uint _controlVariable, \r\n        uint _vestingTerm,\r\n        uint _minimumPrice,\r\n        uint _maxPayout,\r\n        uint _maxDebt,\r\n        uint _initialDebt\r\n    ) external onlyPolicy() {\r\n        require( currentDebt() == 0, \"Debt must be 0 for initialization\" );\r\n        terms = Terms ({\r\n            controlVariable: _controlVariable,\r\n            vestingTerm: _vestingTerm,\r\n            minimumPrice: _minimumPrice,\r\n            maxPayout: _maxPayout,\r\n            maxDebt: _maxDebt\r\n        });\r\n        totalDebt = _initialDebt;\r\n        lastDecay = block.number;\r\n    }\r\n\r\n\r\n\r\n    \r\n    /* ======== POLICY FUNCTIONS ======== */\r\n\r\n    enum PARAMETER { VESTING, PAYOUT, DEBT }\r\n    /**\r\n     *  @notice set parameters for new bonds\r\n     *  @param _parameter PARAMETER\r\n     *  @param _input uint\r\n     */\r\n    function setBondTerms ( PARAMETER _parameter, uint _input ) external onlyPolicy() {\r\n        if ( _parameter == PARAMETER.VESTING ) { // 0\r\n            require( _input >= 10000, \"Vesting must be longer than 36 hours\" );\r\n            terms.vestingTerm = _input;\r\n        } else if ( _parameter == PARAMETER.PAYOUT ) { // 1\r\n            require( _input <= 1000, \"Payout cannot be above 1 percent\" );\r\n            terms.maxPayout = _input;\r\n        } else if ( _parameter == PARAMETER.DEBT ) { // 3\r\n            terms.maxDebt = _input;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice set control variable adjustment\r\n     *  @param _addition bool\r\n     *  @param _increment uint\r\n     *  @param _target uint\r\n     *  @param _buffer uint\r\n     */\r\n    function setAdjustment ( \r\n        bool _addition,\r\n        uint _increment, \r\n        uint _target,\r\n        uint _buffer \r\n    ) external onlyPolicy() {\r\n        require( _increment <= terms.controlVariable.mul( 25 ).div( 1000 ), \"Increment too large\" );\r\n\r\n        adjustment = Adjust({\r\n            add: _addition,\r\n            rate: _increment,\r\n            target: _target,\r\n            buffer: _buffer,\r\n            lastBlock: block.number\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  @notice set contract for auto stake\r\n     *  @param _staking address\r\n     *  @param _helper bool\r\n     */\r\n    function setStaking( address _staking, bool _helper ) external onlyPolicy() {\r\n        require( _staking != address(0) );\r\n        if ( _helper ) {\r\n            useHelper = true;\r\n            stakingHelper = _staking;\r\n        } else {\r\n            useHelper = false;\r\n            staking = _staking;\r\n        }\r\n    }\r\n\r\n\r\n    \r\n\r\n    /* ======== USER FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice deposit bond\r\n     *  @param _amount uint\r\n     *  @param _maxPrice uint\r\n     *  @param _depositor address\r\n     *  @return uint\r\n     */\r\n    function deposit( \r\n        uint _amount, \r\n        uint _maxPrice,\r\n        address _depositor\r\n    ) external returns ( uint ) {\r\n        require( _depositor != address(0), \"Invalid address\" );\r\n\r\n        decayDebt();\r\n        require( totalDebt <= terms.maxDebt, \"Max capacity reached\" );\r\n        \r\n        uint nativePrice = _bondPrice();\r\n\r\n        require( _maxPrice >= nativePrice, \"Slippage limit: more than max price\" ); // slippage protection\r\n\r\n        uint value = ITreasury( treasury ).valueOf( principal, _amount );\r\n        uint payout = payoutFor( value ); // payout to bonder is computed\r\n\r\n        require( payout >= 10000000, \"Bond too small\" ); // must be > 0.01 OHM ( underflow protection )\r\n        require( payout <= maxPayout(), \"Bond too large\"); // size protection because there is no slippage\r\n\r\n        /**\r\n            asset carries risk and is not minted against\r\n            asset transfered to treasury and rewards minted as payout\r\n         */\r\n        IERC20( principal ).safeTransferFrom( msg.sender, treasury, _amount );\r\n        ITreasury( treasury ).mintRewards( address(this), payout );\r\n        \r\n        // total debt is increased\r\n        totalDebt = totalDebt.add( value ); \r\n                \r\n        // depositor info is stored\r\n        bondInfo[ _depositor ] = Bond({ \r\n            payout: bondInfo[ _depositor ].payout.add( payout ),\r\n            vesting: terms.vestingTerm,\r\n            lastBlock: block.number,\r\n            pricePaid: nativePrice\r\n        });\r\n\r\n        // indexed events are emitted\r\n        emit BondCreated( _amount, payout, block.number.add( terms.vestingTerm ), nativePrice );\r\n        emit BondPriceChanged( _bondPrice(), debtRatio() );\r\n\r\n        adjust(); // control variable is adjusted\r\n        return payout; \r\n    }\r\n\r\n    /** \r\n     *  @notice redeem bond for user\r\n     *  @param _recipient address\r\n     *  @param _stake bool\r\n     *  @return uint\r\n     */ \r\n    function redeem( address _recipient, bool _stake ) external returns ( uint ) {        \r\n        Bond memory info = bondInfo[ _recipient ];\r\n        uint percentVested = percentVestedFor( _recipient ); // (blocks since last interaction / vesting term remaining)\r\n\r\n        if ( percentVested >= 10000 ) { // if fully vested\r\n            delete bondInfo[ _recipient ]; // delete user info\r\n            emit BondRedeemed( _recipient, info.payout, 0 ); // emit bond data\r\n            return stakeOrSend( _recipient, _stake, info.payout ); // pay user everything due\r\n\r\n        } else { // if unfinished\r\n            // calculate payout vested\r\n            uint payout = info.payout.mul( percentVested ).div( 10000 );\r\n\r\n            // store updated deposit info\r\n            bondInfo[ _recipient ] = Bond({\r\n                payout: info.payout.sub( payout ),\r\n                vesting: info.vesting.sub( block.number.sub( info.lastBlock ) ),\r\n                lastBlock: block.number,\r\n                pricePaid: info.pricePaid\r\n            });\r\n\r\n            emit BondRedeemed( _recipient, payout, bondInfo[ _recipient ].payout );\r\n            return stakeOrSend( _recipient, _stake, payout );\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice allow user to stake payout automatically\r\n     *  @param _stake bool\r\n     *  @param _amount uint\r\n     *  @return uint\r\n     */\r\n    function stakeOrSend( address _recipient, bool _stake, uint _amount ) internal returns ( uint ) {\r\n        if ( !_stake ) { // if user does not want to stake\r\n            IERC20( OHM ).safeTransfer( _recipient, _amount ); // send payout\r\n        } else { // if user wants to stake\r\n            if ( useHelper ) { // use if staking warmup is 0\r\n                IERC20( OHM ).approve( stakingHelper, _amount );\r\n                IStakingHelper( stakingHelper ).stake( _amount, _recipient );\r\n            } else {\r\n                IERC20( OHM ).approve( staking, _amount );\r\n                IStaking( staking ).stake( _amount, _recipient );\r\n            }\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n     *  @notice makes incremental adjustment to control variable\r\n     */\r\n    function adjust() internal {\r\n        uint blockCanAdjust = adjustment.lastBlock.add( adjustment.buffer );\r\n        if( adjustment.rate != 0 && block.number >= blockCanAdjust ) {\r\n            uint initial = terms.controlVariable;\r\n            if ( adjustment.add ) {\r\n                terms.controlVariable = terms.controlVariable.add( adjustment.rate );\r\n                if ( terms.controlVariable >= adjustment.target ) {\r\n                    adjustment.rate = 0;\r\n                }\r\n            } else {\r\n                terms.controlVariable = terms.controlVariable.sub( adjustment.rate );\r\n                if ( terms.controlVariable <= adjustment.target ) {\r\n                    adjustment.rate = 0;\r\n                }\r\n            }\r\n            adjustment.lastBlock = block.number;\r\n            emit ControlVariableAdjustment( initial, terms.controlVariable, adjustment.rate, adjustment.add );\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice reduce total debt\r\n     */\r\n    function decayDebt() internal {\r\n        totalDebt = totalDebt.sub( debtDecay() );\r\n        lastDecay = block.number;\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ======== VIEW FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice determine maximum bond size\r\n     *  @return uint\r\n     */\r\n    function maxPayout() public view returns ( uint ) {\r\n        return IERC20( OHM ).totalSupply().mul( terms.maxPayout ).div( 100000 );\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate interest due for new bond\r\n     *  @param _value uint\r\n     *  @return uint\r\n     */\r\n    function payoutFor( uint _value ) public view returns ( uint ) {\r\n        return FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e14 );\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate current bond premium\r\n     *  @return price_ uint\r\n     */\r\n    function bondPrice() public view returns ( uint price_ ) {        \r\n        price_ = terms.controlVariable.mul( debtRatio() ).div( 1e5 );\r\n        if ( price_ < terms.minimumPrice ) {\r\n            price_ = terms.minimumPrice;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate current bond price and remove floor if above\r\n     *  @return price_ uint\r\n     */\r\n    function _bondPrice() internal returns ( uint price_ ) {\r\n        price_ = terms.controlVariable.mul( debtRatio() ).div( 1e5 );\r\n        if ( price_ < terms.minimumPrice ) {\r\n            price_ = terms.minimumPrice;        \r\n        } else if ( terms.minimumPrice != 0 ) {\r\n            terms.minimumPrice = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate current ratio of debt to OHM supply\r\n     *  @return debtRatio_ uint\r\n     */\r\n    function debtRatio() public view returns ( uint debtRatio_ ) {   \r\n        uint supply = IERC20( OHM ).totalSupply();\r\n        debtRatio_ = FixedPoint.fraction( \r\n            currentDebt().mul( 1e9 ), \r\n            supply\r\n        ).decode112with18().div( 1e18 );\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate debt factoring in decay\r\n     *  @return uint\r\n     */\r\n    function currentDebt() public view returns ( uint ) {\r\n        return totalDebt.sub( debtDecay() );\r\n    }\r\n\r\n    /**\r\n     *  @notice amount to decay total debt by\r\n     *  @return decay_ uint\r\n     */\r\n    function debtDecay() public view returns ( uint decay_ ) {\r\n        uint blocksSinceLast = block.number.sub( lastDecay );\r\n        decay_ = totalDebt.mul( blocksSinceLast ).div( terms.vestingTerm );\r\n        if ( decay_ > totalDebt ) {\r\n            decay_ = totalDebt;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate how far into vesting a depositor is\r\n     *  @param _depositor address\r\n     *  @return percentVested_ uint\r\n     */\r\n    function percentVestedFor( address _depositor ) public view returns ( uint percentVested_ ) {\r\n        Bond memory bond = bondInfo[ _depositor ];\r\n        uint blocksSinceLast = block.number.sub( bond.lastBlock );\r\n        uint vesting = bond.vesting;\r\n\r\n        if ( vesting > 0 ) {\r\n            percentVested_ = blocksSinceLast.mul( 10000 ).div( vesting );\r\n        } else {\r\n            percentVested_ = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate amount of OHM available for claim by depositor\r\n     *  @param _depositor address\r\n     *  @return pendingPayout_ uint\r\n     */\r\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ ) {\r\n        uint percentVested = percentVestedFor( _depositor );\r\n        uint payout = bondInfo[ _depositor ].payout;\r\n\r\n        if ( percentVested >= 10000 ) {\r\n            pendingPayout_ = payout;\r\n        } else {\r\n            pendingPayout_ = payout.mul( percentVested ).div( 10000 );\r\n        }\r\n    }\r\n\r\n    /* ======= AUXILLIARY ======= */\r\n\r\n    /**\r\n     *  @notice allow anyone to send lost tokens (excluding principal or OHM) to the DAO\r\n     *  @return bool\r\n     */\r\n    function recoverLostToken( address _token ) external returns ( bool ) {\r\n        require( _token != OHM );\r\n        require( _token != principal );\r\n        IERC20( _token ).safeTransfer( DAO, IERC20( _token ).balanceOf( address(this) ) );\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/mocks/DAI.sol": {
      "content": "pragma solidity 0.7.5;\r\n\r\n\r\ncontract LibNote {\r\n  event LogNote(\r\n    bytes4   indexed  sig,\r\n    address  indexed  usr,\r\n    bytes32  indexed  arg1,\r\n    bytes32  indexed  arg2,\r\n    bytes             data\r\n  ) anonymous;\r\n\r\n  modifier note {\r\n    _;\r\n    // assembly {\r\n    //     // log an 'anonymous' event with a constant 6 words of calldata\r\n    //     // and four indexed topics: selector, caller, arg1 and arg2\r\n    //     let mark := msize()                         // end of memory ensures zero\r\n    //     mstore(0x40, add(mark, 288))              // update free memory pointer\r\n    //     mstore(mark, 0x20)                        // bytes type data offset\r\n    //     mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n    //     calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n    //     log4(mark, 288,                           // calldata\r\n    //          shl(224, shr(224, calldataload(0))), // msg.sig\r\n    //          caller(),                              // msg.sender\r\n    //          calldataload(4),                     // arg1\r\n    //          calldataload(36)                     // arg2\r\n    //         )\r\n    // }\r\n  }\r\n}\r\n\r\ninterface IDAI {\r\n\r\n\r\n    // --- Auth ---\r\n  function wards() external returns ( uint256 );\r\n\r\n  function rely(address guy) external;\r\n\r\n  function deny(address guy) external;\r\n\r\n    // --- Token ---\r\n  function transfer(address dst, uint wad) external returns (bool);\r\n\r\n  function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n\r\n  function mint(address usr, uint wad) external;\r\n\r\n  function burn(address usr, uint wad) external;\r\n\r\n  function approve(address usr, uint wad) external returns (bool);\r\n\r\n    // --- Alias ---\r\n  function push(address usr, uint wad) external;\r\n\r\n  function pull(address usr, uint wad) external;\r\n\r\n  function move(address src, address dst, uint wad) external;\r\n\r\n    // --- Approve by signature ---\r\n  function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n////// /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/dai.sol\r\n// Copyright (C) 2017, 2018, 2019 dbrock, rain, mrchico\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.5.12; */\r\n\r\n/* import \"./lib.sol\"; */\r\n\r\ncontract DAI is LibNote {\r\n  \r\n  event Approval(address indexed src, address indexed guy, uint wad);\r\n  event Transfer(address indexed src, address indexed dst, uint wad);\r\n  \r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n\r\n    function rely(address guy) external note auth { wards[guy] = 1; }\r\n\r\n    function deny(address guy) external note auth { wards[guy] = 0; }\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"Dai/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- ERC20 Data ---\r\n    string  public constant name     = \"Dai Stablecoin\";\r\n    string  public constant symbol   = \"DAI\";\r\n    string  public constant version  = \"1\";\r\n    uint8   public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n    uint public dailyDAILimit;\r\n\r\n    mapping (address => uint)                      public balanceOf;\r\n    mapping (address => mapping (address => uint)) private allowances;\r\n    mapping (address => uint)                      public nonces;\r\n    mapping (address => uint)                      public lastMintRestart;\r\n    mapping (address => uint)                      public daiMintedToday;\r\n\r\n    // event Approval(address indexed src, address indexed guy, uint wad);\r\n    // event Transfer(address indexed src, address indexed dst, uint wad);\r\n\r\n    // --- Math ---\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    // --- EIP712 niceties ---\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\r\n\r\n    constructor(uint256 chainId_) {\r\n        wards[msg.sender] = 1;\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\r\n            keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n            keccak256(bytes(name)),\r\n            keccak256(bytes(version)),\r\n            chainId_,\r\n            address(this)\r\n        ));\r\n        dailyDAILimit = 10000000000000000000000;\r\n    }\r\n\r\n    function allowance( address account_, address sender_ ) external view returns ( uint ) {\r\n      return _allowance( account_, sender_ );\r\n    }\r\n\r\n    function _allowance( address account_, address sender_ ) internal view returns ( uint ) {\r\n      \r\n      return allowances[account_][sender_];\r\n    }\r\n\r\n    // --- Token ---\r\n    function transfer(address dst, uint wad) external returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\r\n      \r\n      \r\n      require(balanceOf[src] >= wad, \"Dai/insufficient-balance\");\r\n        if (src != msg.sender && _allowance( src, msg.sender ) != uint(-1)) {\r\n            require(_allowance( src, msg.sender ) >= wad, \"Dai/insufficient-allowance\");\r\n            allowances[src][msg.sender] = sub(_allowance( src, msg.sender ), wad);\r\n        }\r\n        balanceOf[src] = sub(balanceOf[src], wad);\r\n        balanceOf[dst] = add(balanceOf[dst], wad);\r\n        emit Transfer(src, dst, wad);\r\n        return true;\r\n    }\r\n\r\n    function addAuth(address usr) external auth {\r\n        wards[usr] = 1;\r\n    }\r\n\r\n    function adjustDailyDAILimit(uint _limit) external auth {\r\n        dailyDAILimit = _limit;\r\n    }\r\n\r\n    function mint(address usr, uint wad) external {\r\n\r\n      if(wards[msg.sender] == 0) {\r\n        require(add(wad, daiMintedToday[msg.sender]) <= dailyDAILimit || sub(block.number, lastMintRestart[msg.sender]) >= 6500 && wad <= dailyDAILimit, \"Over daily DAI Limit\");\r\n        if( sub(block.number, lastMintRestart[msg.sender]) >= 6500 ) {\r\n            daiMintedToday[msg.sender] = wad;\r\n            lastMintRestart[msg.sender] = block.number;\r\n        } else {\r\n            daiMintedToday[msg.sender] = add(daiMintedToday[msg.sender], wad);\r\n        }\r\n      }\r\n      \r\n      balanceOf[usr] = add(balanceOf[usr], wad);\r\n      \r\n      totalSupply    = add(totalSupply, wad);\r\n      \r\n      \r\n      emit Transfer(address(0), usr, wad);\r\n    }\r\n\r\n    function burn(address usr, uint wad) external {\r\n        require(balanceOf[usr] >= wad, \"Dai/insufficient-balance\");\r\n        if (usr != msg.sender && _allowance( usr, msg.sender ) != uint(-1)) {\r\n            require(_allowance( usr, msg.sender ) >= wad, \"Dai/insufficient-allowance\");\r\n            allowances[usr][msg.sender] = sub(_allowance( usr, msg.sender ), wad);\r\n        }\r\n        balanceOf[usr] = sub(balanceOf[usr], wad);\r\n        totalSupply    = sub(totalSupply, wad);\r\n        emit Transfer(usr, address(0), wad);\r\n    }\r\n\r\n    function _approve(address usr, uint wad) internal returns (bool) {\r\n      \r\n      allowances[msg.sender][usr] = wad;\r\n      \r\n      emit Approval(msg.sender, usr, wad);\r\n      return true;\r\n    }\r\n\r\n    function approve(address usr_, uint wad_ ) external returns (bool) {\r\n      \r\n      return _approve( usr_, wad_ ) ;\r\n    }\r\n\r\n    // --- Alias ---\r\n    function push(address usr, uint wad) external {\r\n        transferFrom(msg.sender, usr, wad);\r\n    }\r\n\r\n    function pull(address usr, uint wad) external {\r\n        transferFrom(usr, msg.sender, wad);\r\n    }\r\n\r\n    function move(address src, address dst, uint wad) external {\r\n        transferFrom(src, dst, wad);\r\n    }\r\n\r\n    // --- Approve by signature ---\r\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry,\r\n                    bool allowed, uint8 v, bytes32 r, bytes32 s) external\r\n    {\r\n        bytes32 digest =\r\n            keccak256(abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH,\r\n                                     holder,\r\n                                     spender,\r\n                                     nonce,\r\n                                     expiry,\r\n                                     allowed))\r\n        ));\r\n\r\n        require(holder != address(0), \"Dai/invalid-address-0\");\r\n        require(holder == ecrecover(digest, v, r, s), \"Dai/invalid-permit\");\r\n        require(expiry == 0 || block.timestamp <= expiry, \"Dai/permit-expired\");\r\n        require(nonce == nonces[holder]++, \"Dai/invalid-nonce\");\r\n        uint wad = allowed ? uint(-1) : 0;\r\n        allowances[holder][spender] = wad;\r\n        emit Approval(holder, spender, wad);\r\n    }\r\n}"
    },
    "contracts/mocks/Frax.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity 0.7.5;\r\n\r\n\r\ncontract LibNote {\r\n  event LogNote(\r\n    bytes4   indexed  sig,\r\n    address  indexed  usr,\r\n    bytes32  indexed  arg1,\r\n    bytes32  indexed  arg2,\r\n    bytes             data\r\n  ) anonymous;\r\n\r\n  modifier note {\r\n    _;\r\n    // assembly {\r\n    //     // log an 'anonymous' event with a constant 6 words of calldata\r\n    //     // and four indexed topics: selector, caller, arg1 and arg2\r\n    //     let mark := msize()                         // end of memory ensures zero\r\n    //     mstore(0x40, add(mark, 288))              // update free memory pointer\r\n    //     mstore(mark, 0x20)                        // bytes type data offset\r\n    //     mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n    //     calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n    //     log4(mark, 288,                           // calldata\r\n    //          shl(224, shr(224, calldataload(0))), // msg.sig\r\n    //          caller(),                              // msg.sender\r\n    //          calldataload(4),                     // arg1\r\n    //          calldataload(36)                     // arg2\r\n    //         )\r\n    // }\r\n  }\r\n}\r\n\r\ninterface IFRAX {\r\n\r\n\r\n    // --- Auth ---\r\n  function wards() external returns ( uint256 );\r\n\r\n  function rely(address guy) external;\r\n\r\n  function deny(address guy) external;\r\n\r\n    // --- Token ---\r\n  function transfer(address dst, uint wad) external returns (bool);\r\n\r\n  function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n\r\n  function mint(address usr, uint wad) external;\r\n\r\n  function burn(address usr, uint wad) external;\r\n\r\n  function approve(address usr, uint wad) external returns (bool);\r\n\r\n    // --- Alias ---\r\n  function push(address usr, uint wad) external;\r\n\r\n  function pull(address usr, uint wad) external;\r\n\r\n  function move(address src, address dst, uint wad) external;\r\n\r\n    // --- Approve by signature ---\r\n  function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\ncontract FRAX is LibNote {\r\n  \r\n  event Approval(address indexed src, address indexed guy, uint wad);\r\n  event Transfer(address indexed src, address indexed dst, uint wad);\r\n  \r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n\r\n    function rely(address guy) external note auth { wards[guy] = 1; }\r\n\r\n    function deny(address guy) external note auth { wards[guy] = 0; }\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"Frax/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- ERC20 Data ---\r\n    string  public constant name     = \"FRAX TOKEN\";\r\n    string  public constant symbol   = \"FRAX\";\r\n    string  public constant version  = \"1\";\r\n    uint8   public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n    uint public dailyFraxLimit;\r\n\r\n    mapping (address => uint)                      public balanceOf;\r\n    mapping (address => mapping (address => uint)) private allowances;\r\n    mapping (address => uint)                      public nonces;\r\n    mapping (address => uint)                      public lastMintRestart;\r\n    mapping (address => uint)                      public fraxMintedToday;\r\n\r\n    // event Approval(address indexed src, address indexed guy, uint wad);\r\n    // event Transfer(address indexed src, address indexed dst, uint wad);\r\n\r\n    // --- Math ---\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    // --- EIP712 niceties ---\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\r\n\r\n    constructor(uint256 chainId_) {\r\n        wards[msg.sender] = 1;\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\r\n            keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n            keccak256(bytes(name)),\r\n            keccak256(bytes(version)),\r\n            chainId_,\r\n            address(this)\r\n        ));\r\n        dailyFraxLimit = 10000000000000000000000;\r\n    }\r\n\r\n    function allowance( address account_, address sender_ ) external view returns ( uint ) {\r\n      return _allowance( account_, sender_ );\r\n    }\r\n\r\n    function _allowance( address account_, address sender_ ) internal view returns ( uint ) {\r\n      \r\n      return allowances[account_][sender_];\r\n    }\r\n\r\n    // --- Token ---\r\n    function transfer(address dst, uint wad) external returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\r\n      \r\n      \r\n      require(balanceOf[src] >= wad, \"Frax/insufficient-balance\");\r\n        if (src != msg.sender && _allowance( src, msg.sender ) != uint(-1)) {\r\n            require(_allowance( src, msg.sender ) >= wad, \"Frax/insufficient-allowance\");\r\n            allowances[src][msg.sender] = sub(_allowance( src, msg.sender ), wad);\r\n        }\r\n        balanceOf[src] = sub(balanceOf[src], wad);\r\n        balanceOf[dst] = add(balanceOf[dst], wad);\r\n        emit Transfer(src, dst, wad);\r\n        return true;\r\n    }\r\n\r\n    function addAuth(address usr) external auth {\r\n        wards[usr] = 1;\r\n    }\r\n\r\n    function adjustDailyFraxLimit(uint _limit) external auth {\r\n        dailyFraxLimit = _limit;\r\n    }\r\n\r\n    function mint(address usr, uint wad) external {\r\n\r\n      if(wards[msg.sender] == 0) {\r\n        require(add(wad, fraxMintedToday[msg.sender]) <= dailyFraxLimit || sub(block.number, lastMintRestart[msg.sender]) >= 6500 && wad <= dailyFraxLimit, \"Over daily Frax Limit\");\r\n        if( sub(block.number, lastMintRestart[msg.sender]) >= 6500 ) {\r\n            fraxMintedToday[msg.sender] = wad;\r\n            lastMintRestart[msg.sender] = block.number;\r\n        } else {\r\n            fraxMintedToday[msg.sender] = add(fraxMintedToday[msg.sender], wad);\r\n        }\r\n      }\r\n      \r\n      balanceOf[usr] = add(balanceOf[usr], wad);\r\n      \r\n      totalSupply    = add(totalSupply, wad);\r\n      \r\n      \r\n      emit Transfer(address(0), usr, wad);\r\n    }\r\n\r\n    function burn(address usr, uint wad) external {\r\n        require(balanceOf[usr] >= wad, \"Frax/insufficient-balance\");\r\n        if (usr != msg.sender && _allowance( usr, msg.sender ) != uint(-1)) {\r\n            require(_allowance( usr, msg.sender ) >= wad, \"Frax/insufficient-allowance\");\r\n            allowances[usr][msg.sender] = sub(_allowance( usr, msg.sender ), wad);\r\n        }\r\n        balanceOf[usr] = sub(balanceOf[usr], wad);\r\n        totalSupply    = sub(totalSupply, wad);\r\n        emit Transfer(usr, address(0), wad);\r\n    }\r\n\r\n    function _approve(address usr, uint wad) internal returns (bool) {\r\n      \r\n      allowances[msg.sender][usr] = wad;\r\n      \r\n      emit Approval(msg.sender, usr, wad);\r\n      return true;\r\n    }\r\n\r\n    function approve(address usr_, uint wad_ ) external returns (bool) {\r\n      \r\n      return _approve( usr_, wad_ ) ;\r\n    }\r\n\r\n    // --- Alias ---\r\n    function push(address usr, uint wad) external {\r\n        transferFrom(msg.sender, usr, wad);\r\n    }\r\n\r\n    function pull(address usr, uint wad) external {\r\n        transferFrom(usr, msg.sender, wad);\r\n    }\r\n\r\n    function move(address src, address dst, uint wad) external {\r\n        transferFrom(src, dst, wad);\r\n    }\r\n\r\n    // --- Approve by signature ---\r\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry,\r\n                    bool allowed, uint8 v, bytes32 r, bytes32 s) external\r\n    {\r\n        bytes32 digest =\r\n            keccak256(abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH,\r\n                                     holder,\r\n                                     spender,\r\n                                     nonce,\r\n                                     expiry,\r\n                                     allowed))\r\n        ));\r\n\r\n        require(holder != address(0), \"Frax/invalid-address-0\");\r\n        require(holder == ecrecover(digest, v, r, s), \"Frax/invalid-permit\");\r\n        require(expiry == 0 || block.timestamp <= expiry, \"Frax/permit-expired\");\r\n        require(nonce == nonces[holder]++, \"Frax/invalid-nonce\");\r\n        uint wad = allowed ? uint(-1) : 0;\r\n        allowances[holder][spender] = wad;\r\n        emit Approval(holder, spender, wad);\r\n    }\r\n}"
    },
    "contracts/mocks/MockBondDepository.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n  function policy() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n\r\n  function pushManagement(address newOwner_) external;\r\n\r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n  address internal _owner;\r\n  address internal _newOwner;\r\n\r\n  event OwnershipPushed(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n  event OwnershipPulled(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  constructor() {\r\n    _owner = msg.sender;\r\n    emit OwnershipPushed(address(0), _owner);\r\n  }\r\n\r\n  function policy() public view override returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyPolicy() {\r\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceManagement() public virtual override onlyPolicy {\r\n    emit OwnershipPushed(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function pushManagement(address newOwner_)\r\n    public\r\n    virtual\r\n    override\r\n    onlyPolicy\r\n  {\r\n    require(newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipPushed(_owner, newOwner_);\r\n    _newOwner = newOwner_;\r\n  }\r\n\r\n  function pullManagement() public virtual override {\r\n    require(msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n    emit OwnershipPulled(_owner, _newOwner);\r\n    _owner = _newOwner;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n\r\n  function sqrrt(uint256 a) internal pure returns (uint256 c) {\r\n    if (a > 3) {\r\n      c = a;\r\n      uint256 b = add(div(a, 2), 1);\r\n      while (b < c) {\r\n        c = b;\r\n        b = div(add(div(a, b), b), 2);\r\n      }\r\n    } else if (a != 0) {\r\n      c = 1;\r\n    }\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{value: amount}(\"\");\r\n    require(\r\n      success,\r\n      \"Address: unable to send value, recipient may have reverted\"\r\n    );\r\n  }\r\n\r\n  function functionCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return _functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return\r\n      functionCallWithValue(\r\n        target,\r\n        data,\r\n        value,\r\n        \"Address: low-level call with value failed\"\r\n      );\r\n  }\r\n\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(\r\n      address(this).balance >= value,\r\n      \"Address: insufficient balance for call\"\r\n    );\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function _functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 weiValue,\r\n    string memory errorMessage\r\n  ) private returns (bytes memory) {\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n      data\r\n    );\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n\r\n  function functionStaticCall(address target, bytes memory data)\r\n    internal\r\n    view\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function functionDelegateCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      functionDelegateCall(\r\n        target,\r\n        data,\r\n        \"Address: low-level delegate call failed\"\r\n      );\r\n  }\r\n\r\n  function functionDelegateCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function _verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) private pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      if (returndata.length > 0) {\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n\r\n  function addressToString(address _address)\r\n    internal\r\n    pure\r\n    returns (string memory)\r\n  {\r\n    bytes32 _bytes = bytes32(uint256(_address));\r\n    bytes memory HEX = \"0123456789abcdef\";\r\n    bytes memory _addr = new bytes(42);\r\n\r\n    _addr[0] = \"0\";\r\n    _addr[1] = \"x\";\r\n\r\n    for (uint256 i = 0; i < 20; i++) {\r\n      _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n      _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n    }\r\n\r\n    return string(_addr);\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  // TODO comment actual hash value.\r\n  bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID =\r\n    keccak256(\"ERC20Token\");\r\n\r\n  mapping(address => uint256) internal _balances;\r\n\r\n  mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n  uint256 internal _totalSupply;\r\n\r\n  string internal _name;\r\n\r\n  string internal _symbol;\r\n\r\n  uint8 internal _decimals;\r\n\r\n  constructor(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint8 decimals_\r\n  ) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _decimals = decimals_;\r\n  }\r\n\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    _approve(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(\r\n      sender,\r\n      msg.sender,\r\n      _allowances[sender][msg.sender].sub(\r\n        amount,\r\n        \"ERC20: transfer amount exceeds allowance\"\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      msg.sender,\r\n      spender,\r\n      _allowances[msg.sender][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      msg.sender,\r\n      spender,\r\n      _allowances[msg.sender][spender].sub(\r\n        subtractedValue,\r\n        \"ERC20: decreased allowance below zero\"\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    _balances[sender] = _balances[sender].sub(\r\n      amount,\r\n      \"ERC20: transfer amount exceeds balance\"\r\n    );\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _mint(address account_, uint256 ammount_) internal virtual {\r\n    require(account_ != address(0), \"ERC20: mint to the zero address\");\r\n    _beforeTokenTransfer(address(this), account_, ammount_);\r\n    _totalSupply = _totalSupply.add(ammount_);\r\n    _balances[account_] = _balances[account_].add(ammount_);\r\n    emit Transfer(address(this), account_, ammount_);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    _balances[account] = _balances[account].sub(\r\n      amount,\r\n      \"ERC20: burn amount exceeds balance\"\r\n    );\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from_,\r\n    address to_,\r\n    uint256 amount_\r\n  ) internal virtual {}\r\n}\r\n\r\ninterface IERC2612Permit {\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\nlibrary Counters {\r\n  using SafeMath for uint256;\r\n\r\n  struct Counter {\r\n    uint256 _value; // default: 0\r\n  }\r\n\r\n  function current(Counter storage counter) internal view returns (uint256) {\r\n    return counter._value;\r\n  }\r\n\r\n  function increment(Counter storage counter) internal {\r\n    counter._value += 1;\r\n  }\r\n\r\n  function decrement(Counter storage counter) internal {\r\n    counter._value = counter._value.sub(1);\r\n  }\r\n}\r\n\r\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\r\n  using Counters for Counters.Counter;\r\n\r\n  mapping(address => Counters.Counter) private _nonces;\r\n\r\n  // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n  bytes32 public constant PERMIT_TYPEHASH =\r\n    0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n  bytes32 public DOMAIN_SEPARATOR;\r\n\r\n  constructor() {\r\n    uint256 chainID;\r\n    assembly {\r\n      chainID := chainid()\r\n    }\r\n\r\n    DOMAIN_SEPARATOR = keccak256(\r\n      abi.encode(\r\n        keccak256(\r\n          \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        ),\r\n        keccak256(bytes(name())),\r\n        keccak256(bytes(\"1\")), // Version\r\n        chainID,\r\n        address(this)\r\n      )\r\n    );\r\n  }\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) public virtual override {\r\n    require(block.timestamp <= deadline, \"Permit: expired deadline\");\r\n\r\n    bytes32 hashStruct = keccak256(\r\n      abi.encode(\r\n        PERMIT_TYPEHASH,\r\n        owner,\r\n        spender,\r\n        amount,\r\n        _nonces[owner].current(),\r\n        deadline\r\n      )\r\n    );\r\n\r\n    bytes32 _hash = keccak256(\r\n      abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct)\r\n    );\r\n\r\n    address signer = ecrecover(_hash, v, r, s);\r\n    require(\r\n      signer != address(0) && signer == owner,\r\n      \"ZeroSwapPermit: Invalid signature\"\r\n    );\r\n\r\n    _nonces[owner].increment();\r\n    _approve(owner, spender, amount);\r\n  }\r\n\r\n  function nonces(address owner) public view override returns (uint256) {\r\n    return _nonces[owner].current();\r\n  }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.transfer.selector, to, value)\r\n    );\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n    );\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    require(\r\n      (value == 0) || (token.allowance(address(this), spender) == 0),\r\n      \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n    );\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.approve.selector, spender, value)\r\n    );\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n    );\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n      value,\r\n      \"SafeERC20: decreased allowance below zero\"\r\n    );\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n    );\r\n  }\r\n\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    bytes memory returndata = address(token).functionCall(\r\n      data,\r\n      \"SafeERC20: low-level call failed\"\r\n    );\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      // solhint-disable-next-line max-line-length\r\n      require(\r\n        abi.decode(returndata, (bool)),\r\n        \"SafeERC20: ERC20 operation did not succeed\"\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nlibrary FullMath {\r\n  function fullMul(uint256 x, uint256 y)\r\n    private\r\n    pure\r\n    returns (uint256 l, uint256 h)\r\n  {\r\n    uint256 mm = mulmod(x, y, uint256(-1));\r\n    l = x * y;\r\n    h = mm - l;\r\n    if (mm < l) h -= 1;\r\n  }\r\n\r\n  function fullDiv(\r\n    uint256 l,\r\n    uint256 h,\r\n    uint256 d\r\n  ) private pure returns (uint256) {\r\n    uint256 pow2 = d & -d;\r\n    d /= pow2;\r\n    l /= pow2;\r\n    l += h * ((-pow2) / pow2 + 1);\r\n    uint256 r = 1;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    return l * r;\r\n  }\r\n\r\n  function mulDiv(\r\n    uint256 x,\r\n    uint256 y,\r\n    uint256 d\r\n  ) internal pure returns (uint256) {\r\n    (uint256 l, uint256 h) = fullMul(x, y);\r\n    uint256 mm = mulmod(x, y, d);\r\n    if (mm > l) h -= 1;\r\n    l -= mm;\r\n    require(h < d, \"FullMath::mulDiv: overflow\");\r\n    return fullDiv(l, h, d);\r\n  }\r\n}\r\n\r\nlibrary FixedPoint {\r\n  struct uq112x112 {\r\n    uint224 _x;\r\n  }\r\n\r\n  struct uq144x112 {\r\n    uint256 _x;\r\n  }\r\n\r\n  uint8 private constant RESOLUTION = 112;\r\n  uint256 private constant Q112 = 0x10000000000000000000000000000;\r\n  uint256 private constant Q224 =\r\n    0x100000000000000000000000000000000000000000000000000000000;\r\n  uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n  function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n    return uint112(self._x >> RESOLUTION);\r\n  }\r\n\r\n  function decode112with18(uq112x112 memory self)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    return uint256(self._x) / 5192296858534827;\r\n  }\r\n\r\n  function fraction(uint256 numerator, uint256 denominator)\r\n    internal\r\n    pure\r\n    returns (uq112x112 memory)\r\n  {\r\n    require(denominator > 0, \"FixedPoint::fraction: division by zero\");\r\n    if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n    if (numerator <= uint144(-1)) {\r\n      uint256 result = (numerator << RESOLUTION) / denominator;\r\n      require(result <= uint224(-1), \"FixedPoint::fraction: overflow\");\r\n      return uq112x112(uint224(result));\r\n    } else {\r\n      uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n      require(result <= uint224(-1), \"FixedPoint::fraction: overflow\");\r\n      return uq112x112(uint224(result));\r\n    }\r\n  }\r\n}\r\n\r\ninterface ITreasury {\r\n  function deposit(\r\n    uint256 _amount,\r\n    address _token,\r\n    uint256 _profit\r\n  ) external returns (bool);\r\n\r\n  function valueOfToken(address _token, uint256 _amount)\r\n    external\r\n    view\r\n    returns (uint256 value_);\r\n}\r\n\r\ninterface IBondCalculator {\r\n  function valuation(address _LP, uint256 _amount)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function markdown(address _LP) external view returns (uint256);\r\n}\r\n\r\ninterface IStaking {\r\n  function stake(uint256 _amount, address _recipient) external returns (bool);\r\n}\r\n\r\ninterface IStakingHelper {\r\n  function stake(uint256 _amount, address _recipient) external;\r\n}\r\n\r\ncontract MockOlympusBondDepository is Ownable {\r\n  using FixedPoint for *;\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  /* ======== EVENTS ======== */\r\n\r\n  event BondCreated(\r\n    uint256 deposit,\r\n    uint256 indexed payout,\r\n    uint256 indexed expires,\r\n    uint256 indexed priceInUSD\r\n  );\r\n  event BondRedeemed(\r\n    address indexed recipient,\r\n    uint256 payout,\r\n    uint256 remaining\r\n  );\r\n  event BondPriceChanged(\r\n    uint256 indexed priceInUSD,\r\n    uint256 indexed internalPrice,\r\n    uint256 indexed debtRatio\r\n  );\r\n  event ControlVariableAdjustment(\r\n    uint256 initialBCV,\r\n    uint256 newBCV,\r\n    uint256 adjustment,\r\n    bool addition\r\n  );\r\n\r\n  /* ======== STATE VARIABLES ======== */\r\n\r\n  address public immutable OHM; // token given as payment for bond\r\n  address public immutable principle; // token used to create bond\r\n  address public immutable treasury; // mints OHM when receives principle\r\n  address public immutable DAO; // receives profit share from bond\r\n\r\n  bool public immutable isLiquidityBond; // LP and Reserve bonds are treated slightly different\r\n  address public immutable bondCalculator; // calculates value of LP tokens\r\n\r\n  address public staking; // to auto-stake payout\r\n  address public stakingHelper; // to stake and claim if no staking warmup\r\n  bool public useHelper;\r\n\r\n  Terms public terms; // stores terms for new bonds\r\n  Adjust public adjustment; // stores adjustment to BCV data\r\n\r\n  mapping(address => Bond) public bondInfo; // stores bond information for depositors\r\n\r\n  uint256 public totalDebt; // total value of outstanding bonds; used for pricing\r\n  uint256 public lastDecay; // reference block for debt decay\r\n\r\n  /* ======== STRUCTS ======== */\r\n\r\n  // Info for creating new bonds\r\n  struct Terms {\r\n    uint256 controlVariable; // scaling variable for price\r\n    uint256 vestingTerm; // in blocks\r\n    uint256 minimumPrice; // vs principle value\r\n    uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\r\n    uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\r\n    uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\r\n  }\r\n\r\n  // Info for bond holder\r\n  struct Bond {\r\n    uint256 payout; // OHM remaining to be paid\r\n    uint256 vesting; // Blocks left to vest\r\n    uint256 lastBlock; // Last interaction\r\n    uint256 pricePaid; // In DAI, for front end viewing\r\n  }\r\n\r\n  // Info for incremental adjustments to control variable\r\n  struct Adjust {\r\n    bool add; // addition or subtraction\r\n    uint256 rate; // increment\r\n    uint256 target; // BCV when adjustment finished\r\n    uint256 buffer; // minimum length (in blocks) between adjustments\r\n    uint256 lastBlock; // block when last adjustment made\r\n  }\r\n\r\n  /* ======== INITIALIZATION ======== */\r\n\r\n  constructor(\r\n    address _OHM,\r\n    address _principle,\r\n    address _treasury,\r\n    address _DAO,\r\n    address _bondCalculator\r\n  ) {\r\n    require(_OHM != address(0));\r\n    OHM = _OHM;\r\n    require(_principle != address(0));\r\n    principle = _principle;\r\n    require(_treasury != address(0));\r\n    treasury = _treasury;\r\n    require(_DAO != address(0));\r\n    DAO = _DAO;\r\n    // bondCalculator should be address(0) if not LP bond\r\n    bondCalculator = _bondCalculator;\r\n    isLiquidityBond = (_bondCalculator != address(0));\r\n  }\r\n\r\n  /**\r\n   *  @notice initializes bond parameters\r\n   *  @param _controlVariable uint\r\n   *  @param _vestingTerm uint\r\n   *  @param _minimumPrice uint\r\n   *  @param _maxPayout uint\r\n   *  @param _fee uint\r\n   *  @param _maxDebt uint\r\n   *  @param _initialDebt uint\r\n   */\r\n  function initializeBondTerms(\r\n    uint256 _controlVariable,\r\n    uint256 _vestingTerm,\r\n    uint256 _minimumPrice,\r\n    uint256 _maxPayout,\r\n    uint256 _fee,\r\n    uint256 _maxDebt,\r\n    uint256 _initialDebt\r\n  ) external onlyPolicy {\r\n    require(terms.controlVariable == 0, \"Bonds must be initialized from 0\");\r\n    terms = Terms({\r\n      controlVariable: _controlVariable,\r\n      vestingTerm: _vestingTerm,\r\n      minimumPrice: _minimumPrice,\r\n      maxPayout: _maxPayout,\r\n      fee: _fee,\r\n      maxDebt: _maxDebt\r\n    });\r\n    totalDebt = _initialDebt;\r\n    lastDecay = block.number;\r\n  }\r\n\r\n  /* ======== POLICY FUNCTIONS ======== */\r\n\r\n  enum PARAMETER {\r\n    VESTING,\r\n    PAYOUT,\r\n    FEE,\r\n    DEBT\r\n  }\r\n\r\n  /**\r\n   *  @notice set parameters for new bonds\r\n   *  @param _parameter PARAMETER\r\n   *  @param _input uint\r\n   */\r\n  function setBondTerms(PARAMETER _parameter, uint256 _input)\r\n    external\r\n    onlyPolicy\r\n  {\r\n    if (_parameter == PARAMETER.VESTING) {\r\n      // 0\r\n      require(_input >= 10000, \"Vesting must be longer than 36 hours\");\r\n      terms.vestingTerm = _input;\r\n    } else if (_parameter == PARAMETER.PAYOUT) {\r\n      // 1\r\n      require(_input <= 1000, \"Payout cannot be above 1 percent\");\r\n      terms.maxPayout = _input;\r\n    } else if (_parameter == PARAMETER.FEE) {\r\n      // 2\r\n      require(_input <= 10000, \"DAO fee cannot exceed payout\");\r\n      terms.fee = _input;\r\n    } else if (_parameter == PARAMETER.DEBT) {\r\n      // 3\r\n      terms.maxDebt = _input;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice set control variable adjustment\r\n   *  @param _addition bool\r\n   *  @param _increment uint\r\n   *  @param _target uint\r\n   *  @param _buffer uint\r\n   */\r\n  function setAdjustment(\r\n    bool _addition,\r\n    uint256 _increment,\r\n    uint256 _target,\r\n    uint256 _buffer\r\n  ) external onlyPolicy {\r\n    require(\r\n      _increment <= terms.controlVariable.mul(25).div(1000),\r\n      \"Increment too large\"\r\n    );\r\n\r\n    adjustment = Adjust({\r\n      add: _addition,\r\n      rate: _increment,\r\n      target: _target,\r\n      buffer: _buffer,\r\n      lastBlock: block.number\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  @notice set contract for auto stake\r\n   *  @param _staking address\r\n   *  @param _helper bool\r\n   */\r\n  function setStaking(address _staking, bool _helper) external onlyPolicy {\r\n    require(_staking != address(0));\r\n    if (_helper) {\r\n      useHelper = true;\r\n      stakingHelper = _staking;\r\n    } else {\r\n      useHelper = false;\r\n      staking = _staking;\r\n    }\r\n  }\r\n\r\n  /* ======== USER FUNCTIONS ======== */\r\n\r\n  /**\r\n   *  @notice deposit bond\r\n   *  @param _amount uint\r\n   *  @param _maxPrice uint\r\n   *  @param _depositor address\r\n   *  @return uint\r\n   */\r\n  function deposit(\r\n    uint256 _amount,\r\n    uint256 _maxPrice,\r\n    address _depositor\r\n  ) external returns (uint256) {\r\n    require(_depositor != address(0), \"Invalid address\");\r\n\r\n    decayDebt();\r\n    require(totalDebt <= terms.maxDebt, \"Max capacity reached\");\r\n\r\n    uint256 priceInUSD = bondPriceInUSD(); // Stored in bond info\r\n    uint256 nativePrice = _bondPrice();\r\n\r\n    require(_maxPrice >= nativePrice, \"Slippage limit: more than max price\"); // slippage protection\r\n\r\n    uint256 value = ITreasury(treasury).valueOfToken(principle, _amount);\r\n    uint256 payout = payoutFor(value); // payout to bonder is computed\r\n\r\n    require(payout >= 10000000, \"Bond too small\"); // must be > 0.01 OHM ( underflow protection )\r\n    require(payout <= maxPayout(), \"Bond too large\"); // size protection because there is no slippage\r\n\r\n    // profits are calculated\r\n    uint256 fee = payout.mul(terms.fee).div(10000);\r\n    uint256 profit = value.sub(payout).sub(fee);\r\n\r\n    /**\r\n            principle is transferred in\r\n            approved and\r\n            deposited into the treasury, returning (_amount - profit) OHM\r\n         */\r\n    IERC20(principle).safeTransferFrom(msg.sender, address(this), _amount);\r\n    IERC20(principle).approve(address(treasury), _amount);\r\n    ITreasury(treasury).deposit(_amount, principle, profit);\r\n\r\n    if (fee != 0) {\r\n      // fee is transferred to dao\r\n      IERC20(OHM).safeTransfer(DAO, fee);\r\n    }\r\n\r\n    // total debt is increased\r\n    totalDebt = totalDebt.add(value);\r\n\r\n    // depositor info is stored\r\n    bondInfo[_depositor] = Bond({\r\n      payout: bondInfo[_depositor].payout.add(payout),\r\n      vesting: terms.vestingTerm,\r\n      lastBlock: block.number,\r\n      pricePaid: priceInUSD\r\n    });\r\n\r\n    // indexed events are emitted\r\n    emit BondCreated(\r\n      _amount,\r\n      payout,\r\n      block.number.add(terms.vestingTerm),\r\n      priceInUSD\r\n    );\r\n    emit BondPriceChanged(bondPriceInUSD(), _bondPrice(), debtRatio());\r\n\r\n    adjust(); // control variable is adjusted\r\n    return payout;\r\n  }\r\n\r\n  /**\r\n   *  @notice redeem bond for user\r\n   *  @param _recipient address\r\n   *  @param _stake bool\r\n   *  @return uint\r\n   */\r\n  function redeem(address _recipient, bool _stake) external returns (uint256) {\r\n    Bond memory info = bondInfo[_recipient];\r\n    uint256 percentVested = percentVestedFor(_recipient); // (blocks since last interaction / vesting term remaining)\r\n\r\n    if (percentVested >= 10000) {\r\n      // if fully vested\r\n      delete bondInfo[_recipient]; // delete user info\r\n      emit BondRedeemed(_recipient, info.payout, 0); // emit bond data\r\n      return stakeOrSend(_recipient, _stake, info.payout); // pay user everything due\r\n    } else {\r\n      // if unfinished\r\n      // calculate payout vested\r\n      uint256 payout = info.payout.mul(percentVested).div(10000);\r\n\r\n      // store updated deposit info\r\n      bondInfo[_recipient] = Bond({\r\n        payout: info.payout.sub(payout),\r\n        vesting: info.vesting.sub(block.number.sub(info.lastBlock)),\r\n        lastBlock: block.number,\r\n        pricePaid: info.pricePaid\r\n      });\r\n\r\n      emit BondRedeemed(_recipient, payout, bondInfo[_recipient].payout);\r\n      return stakeOrSend(_recipient, _stake, payout);\r\n    }\r\n  }\r\n\r\n  /* ======== INTERNAL HELPER FUNCTIONS ======== */\r\n\r\n  /**\r\n   *  @notice allow user to stake payout automatically\r\n   *  @param _stake bool\r\n   *  @param _amount uint\r\n   *  @return uint\r\n   */\r\n  function stakeOrSend(\r\n    address _recipient,\r\n    bool _stake,\r\n    uint256 _amount\r\n  ) internal returns (uint256) {\r\n    if (!_stake) {\r\n      // if user does not want to stake\r\n      IERC20(OHM).transfer(_recipient, _amount); // send payout\r\n    } else {\r\n      // if user wants to stake\r\n      if (useHelper) {\r\n        // use if staking warmup is 0\r\n        IERC20(OHM).approve(stakingHelper, _amount);\r\n        IStakingHelper(stakingHelper).stake(_amount, _recipient);\r\n      } else {\r\n        IERC20(OHM).approve(staking, _amount);\r\n        IStaking(staking).stake(_amount, _recipient);\r\n      }\r\n    }\r\n    return _amount;\r\n  }\r\n\r\n  /**\r\n   *  @notice makes incremental adjustment to control variable\r\n   */\r\n  function adjust() internal {\r\n    uint256 blockCanAdjust = adjustment.lastBlock.add(adjustment.buffer);\r\n    if (adjustment.rate != 0 && block.number >= blockCanAdjust) {\r\n      uint256 initial = terms.controlVariable;\r\n      if (adjustment.add) {\r\n        terms.controlVariable = terms.controlVariable.add(adjustment.rate);\r\n        if (terms.controlVariable >= adjustment.target) {\r\n          adjustment.rate = 0;\r\n        }\r\n      } else {\r\n        terms.controlVariable = terms.controlVariable.sub(adjustment.rate);\r\n        if (terms.controlVariable <= adjustment.target) {\r\n          adjustment.rate = 0;\r\n        }\r\n      }\r\n      adjustment.lastBlock = block.number;\r\n      emit ControlVariableAdjustment(\r\n        initial,\r\n        terms.controlVariable,\r\n        adjustment.rate,\r\n        adjustment.add\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice reduce total debt\r\n   */\r\n  function decayDebt() internal {\r\n    totalDebt = totalDebt.sub(debtDecay());\r\n    lastDecay = block.number;\r\n  }\r\n\r\n  /* ======== VIEW FUNCTIONS ======== */\r\n\r\n  /**\r\n   *  @notice determine maximum bond size\r\n   *  @return uint\r\n   */\r\n  function maxPayout() public view returns (uint256) {\r\n    return IERC20(OHM).totalSupply().mul(terms.maxPayout).div(100000);\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate interest due for new bond\r\n   *  @param _value uint\r\n   *  @return uint\r\n   */\r\n  function payoutFor(uint256 _value) public view returns (uint256) {\r\n    return FixedPoint.fraction(_value, bondPrice()).decode112with18().div(1e16);\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate current bond premium\r\n   *  @return price_ uint\r\n   */\r\n  function bondPrice() public view returns (uint256 price_) {\r\n    price_ = terms.controlVariable.mul(debtRatio()).add(1000000000).div(1e7);\r\n    if (price_ < terms.minimumPrice) {\r\n      price_ = terms.minimumPrice;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate current bond price and remove floor if above\r\n   *  @return price_ uint\r\n   */\r\n  function _bondPrice() internal returns (uint256 price_) {\r\n    price_ = terms.controlVariable.mul(debtRatio()).add(1000000000).div(1e7);\r\n    if (price_ < terms.minimumPrice) {\r\n      price_ = terms.minimumPrice;\r\n    } else if (terms.minimumPrice != 0) {\r\n      terms.minimumPrice = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice converts bond price to DAI value\r\n   *  @return price_ uint\r\n   */\r\n  function bondPriceInUSD() public view returns (uint256 price_) {\r\n    if (isLiquidityBond) {\r\n      price_ = bondPrice()\r\n        .mul(IBondCalculator(bondCalculator).markdown(principle))\r\n        .div(100);\r\n    } else {\r\n      price_ = bondPrice().mul(10**IERC20(principle).decimals()).div(100);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate current ratio of debt to OHM supply\r\n   *  @return debtRatio_ uint\r\n   */\r\n  function debtRatio() public view returns (uint256 debtRatio_) {\r\n    uint256 supply = IERC20(OHM).totalSupply();\r\n    debtRatio_ = FixedPoint\r\n      .fraction(currentDebt().mul(1e9), supply)\r\n      .decode112with18()\r\n      .div(1e18);\r\n  }\r\n\r\n  /**\r\n   *  @notice debt ratio in same terms for reserve or liquidity bonds\r\n   *  @return uint\r\n   */\r\n  function standardizedDebtRatio() external view returns (uint256) {\r\n    if (isLiquidityBond) {\r\n      return\r\n        debtRatio()\r\n          .mul(IBondCalculator(bondCalculator).markdown(principle))\r\n          .div(1e9);\r\n    } else {\r\n      return debtRatio();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate debt factoring in decay\r\n   *  @return uint\r\n   */\r\n  function currentDebt() public view returns (uint256) {\r\n    return totalDebt.sub(debtDecay());\r\n  }\r\n\r\n  /**\r\n   *  @notice amount to decay total debt by\r\n   *  @return decay_ uint\r\n   */\r\n  function debtDecay() public view returns (uint256 decay_) {\r\n    uint256 blocksSinceLast = block.number.sub(lastDecay);\r\n    decay_ = totalDebt.mul(blocksSinceLast).div(terms.vestingTerm);\r\n    if (decay_ > totalDebt) {\r\n      decay_ = totalDebt;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate how far into vesting a depositor is\r\n   *  @param _depositor address\r\n   *  @return percentVested_ uint\r\n   */\r\n  function percentVestedFor(address _depositor)\r\n    public\r\n    view\r\n    returns (uint256 percentVested_)\r\n  {\r\n    Bond memory bond = bondInfo[_depositor];\r\n    uint256 blocksSinceLast = block.number.sub(bond.lastBlock);\r\n    uint256 vesting = bond.vesting;\r\n\r\n    if (vesting > 0) {\r\n      percentVested_ = blocksSinceLast.mul(10000).div(vesting);\r\n    } else {\r\n      percentVested_ = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate amount of OHM available for claim by depositor\r\n   *  @param _depositor address\r\n   *  @return pendingPayout_ uint\r\n   */\r\n  function pendingPayoutFor(address _depositor)\r\n    external\r\n    view\r\n    returns (uint256 pendingPayout_)\r\n  {\r\n    uint256 percentVested = percentVestedFor(_depositor);\r\n    uint256 payout = bondInfo[_depositor].payout;\r\n\r\n    if (percentVested >= 10000) {\r\n      pendingPayout_ = payout;\r\n    } else {\r\n      pendingPayout_ = payout.mul(percentVested).div(10000);\r\n    }\r\n  }\r\n\r\n  /* ======= AUXILLIARY ======= */\r\n\r\n  /**\r\n   *  @notice allow anyone to send lost tokens (excluding principle or OHM) to the DAO\r\n   *  @return bool\r\n   */\r\n  function recoverLostToken(address _token) external returns (bool) {\r\n    require(_token != OHM);\r\n    require(_token != principle);\r\n    IERC20(_token).safeTransfer(DAO, IERC20(_token).balanceOf(address(this)));\r\n    return true;\r\n  }\r\n}\r\n"
    },
    "contracts/mocks/MockBrickToken.sol": {
      "content": "pragma solidity 0.7.5;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockBrickToken is ERC20 {\r\n    constructor() ERC20(\"BrickToken\", \"BRK\") {\r\n        _mint(msg.sender, 10000000 ether);\r\n    }\r\n\r\n    function mint() external {\r\n        _mint(msg.sender, 10000 ether);\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/MockStakedToken.sol": {
      "content": "pragma solidity 0.7.5;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockStakedToken is ERC20 {\r\n    constructor() ERC20(\"StakedToken\", \"STK\") {\r\n        _mint(msg.sender, 10000000 ether);\r\n    }\r\n\r\n    function mint() external {\r\n        _mint(msg.sender, 10000 ether);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/MockTreasury.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies in extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n\r\n    uint256 size;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return _functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  function _functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 weiValue,\r\n    string memory errorMessage\r\n  ) private returns (bytes memory) {\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n      data\r\n    );\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      if (returndata.length > 0) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) private pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      if (returndata.length > 0) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ninterface IOwnable {\r\n  function manager() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n\r\n  function pushManagement(address newOwner_) external;\r\n\r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n  address internal _owner;\r\n  address internal _newOwner;\r\n\r\n  event OwnershipPushed(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n  event OwnershipPulled(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  constructor() {\r\n    _owner = msg.sender;\r\n    emit OwnershipPushed(address(0), _owner);\r\n  }\r\n\r\n  function manager() public view override returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyManager() {\r\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceManagement() public virtual override onlyManager {\r\n    emit OwnershipPushed(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function pushManagement(address newOwner_)\r\n    public\r\n    virtual\r\n    override\r\n    onlyManager\r\n  {\r\n    require(newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipPushed(_owner, newOwner_);\r\n    _newOwner = newOwner_;\r\n  }\r\n\r\n  function pullManagement() public virtual override {\r\n    require(msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n    emit OwnershipPulled(_owner, _newOwner);\r\n    _owner = _newOwner;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.transfer.selector, to, value)\r\n    );\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n    );\r\n  }\r\n\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    bytes memory returndata = address(token).functionCall(\r\n      data,\r\n      \"SafeERC20: low-level call failed\"\r\n    );\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      // solhint-disable-next-line max-line-length\r\n      require(\r\n        abi.decode(returndata, (bool)),\r\n        \"SafeERC20: ERC20 operation did not succeed\"\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\ninterface IERC20Mintable {\r\n  function mint(uint256 amount_) external;\r\n\r\n  function mint(address account_, uint256 ammount_) external;\r\n}\r\n\r\ninterface IOHMERC20 {\r\n  function burnFrom(address account_, uint256 amount_) external;\r\n}\r\n\r\ninterface IBondCalculator {\r\n  function valuation(address pair_, uint256 amount_)\r\n    external\r\n    view\r\n    returns (uint256 _value);\r\n}\r\n\r\ncontract MockOlympusTreasury is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  event Deposit(address indexed token, uint256 amount, uint256 value);\r\n  event Withdrawal(address indexed token, uint256 amount, uint256 value);\r\n  event CreateDebt(\r\n    address indexed debtor,\r\n    address indexed token,\r\n    uint256 amount,\r\n    uint256 value\r\n  );\r\n  event RepayDebt(\r\n    address indexed debtor,\r\n    address indexed token,\r\n    uint256 amount,\r\n    uint256 value\r\n  );\r\n  event ReservesManaged(address indexed token, uint256 amount);\r\n  event ReservesUpdated(uint256 indexed totalReserves);\r\n  event ReservesAudited(uint256 indexed totalReserves);\r\n  event RewardsMinted(\r\n    address indexed caller,\r\n    address indexed recipient,\r\n    uint256 amount\r\n  );\r\n  event ChangeQueued(MANAGING indexed managing, address queued);\r\n  event ChangeActivated(\r\n    MANAGING indexed managing,\r\n    address activated,\r\n    bool result\r\n  );\r\n\r\n  enum MANAGING {\r\n    RESERVEDEPOSITOR,\r\n    RESERVESPENDER,\r\n    RESERVETOKEN,\r\n    RESERVEMANAGER,\r\n    LIQUIDITYDEPOSITOR,\r\n    LIQUIDITYTOKEN,\r\n    LIQUIDITYMANAGER,\r\n    DEBTOR,\r\n    REWARDMANAGER,\r\n    SOHM\r\n  }\r\n\r\n  address public immutable OHM;\r\n  uint256 public immutable blocksNeededForQueue;\r\n\r\n  address[] public reserveTokens; // Push only, beware false-positives.\r\n  mapping(address => bool) public isReserveToken;\r\n  mapping(address => uint256) public reserveTokenQueue; // Delays changes to mapping.\r\n\r\n  address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\r\n  mapping(address => bool) public isReserveDepositor;\r\n  mapping(address => uint256) public reserveDepositorQueue; // Delays changes to mapping.\r\n\r\n  address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\r\n  mapping(address => bool) public isReserveSpender;\r\n  mapping(address => uint256) public reserveSpenderQueue; // Delays changes to mapping.\r\n\r\n  address[] public liquidityTokens; // Push only, beware false-positives.\r\n  mapping(address => bool) public isLiquidityToken;\r\n  mapping(address => uint256) public LiquidityTokenQueue; // Delays changes to mapping.\r\n\r\n  address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\r\n  mapping(address => bool) public isLiquidityDepositor;\r\n  mapping(address => uint256) public LiquidityDepositorQueue; // Delays changes to mapping.\r\n\r\n  mapping(address => address) public bondCalculator; // bond calculator for liquidity token\r\n\r\n  address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\r\n  mapping(address => bool) public isReserveManager;\r\n  mapping(address => uint256) public ReserveManagerQueue; // Delays changes to mapping.\r\n\r\n  address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\r\n  mapping(address => bool) public isLiquidityManager;\r\n  mapping(address => uint256) public LiquidityManagerQueue; // Delays changes to mapping.\r\n\r\n  address[] public debtors; // Push only, beware false-positives. Only for viewing.\r\n  mapping(address => bool) public isDebtor;\r\n  mapping(address => uint256) public debtorQueue; // Delays changes to mapping.\r\n  mapping(address => uint256) public debtorBalance;\r\n\r\n  address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\r\n  mapping(address => bool) public isRewardManager;\r\n  mapping(address => uint256) public rewardManagerQueue; // Delays changes to mapping.\r\n\r\n  address public sOHM;\r\n  uint256 public sOHMQueue; // Delays change to sOHM address\r\n\r\n  uint256 public totalReserves; // Risk-free value of all assets\r\n  uint256 public totalDebt;\r\n\r\n  constructor(\r\n    address _OHM,\r\n    address _DAI,\r\n    address _Frax,\r\n    //address _OHMDAI,\r\n    uint256 _blocksNeededForQueue\r\n  ) {\r\n    require(_OHM != address(0));\r\n    OHM = _OHM;\r\n\r\n    isReserveToken[_DAI] = true;\r\n    reserveTokens.push(_DAI);\r\n\r\n    isReserveToken[_Frax] = true;\r\n    reserveTokens.push(_Frax);\r\n\r\n    // isLiquidityToken[ _OHMDAI ] = true;\r\n    // liquidityTokens.push( _OHMDAI );\r\n\r\n    blocksNeededForQueue = _blocksNeededForQueue;\r\n  }\r\n\r\n  /**\r\n        @notice allow approved address to deposit an asset for OHM\r\n        @param _amount uint\r\n        @param _token address\r\n        @param _profit uint\r\n        @return send_ uint\r\n     */\r\n  function deposit(\r\n    uint256 _amount,\r\n    address _token,\r\n    uint256 _profit\r\n  ) external returns (uint256 send_) {\r\n    require(isReserveToken[_token] || isLiquidityToken[_token], \"Not accepted\");\r\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n    if (isReserveToken[_token]) {\r\n      require(isReserveDepositor[msg.sender], \"Not approved\");\r\n    } else {\r\n      require(isLiquidityDepositor[msg.sender], \"Not approved\");\r\n    }\r\n\r\n    uint256 value = valueOfToken(_token, _amount);\r\n    (_token, _amount);\r\n    // mint OHM needed and store amount of rewards for distribution\r\n    send_ = value.sub(_profit);\r\n    IERC20Mintable(OHM).mint(msg.sender, send_);\r\n\r\n    totalReserves = totalReserves.add(value);\r\n    emit ReservesUpdated(totalReserves);\r\n\r\n    emit Deposit(_token, _amount, value);\r\n  }\r\n\r\n  /**\r\n        @notice allow approved address to burn OHM for reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n  function withdraw(uint256 _amount, address _token) external {\r\n    require(isReserveToken[_token], \"Not accepted\"); // Only reserves can be used for redemptions\r\n    require(isReserveSpender[msg.sender] == true, \"Not approved\");\r\n\r\n    uint256 value = valueOfToken(_token, _amount);\r\n    IOHMERC20(OHM).burnFrom(msg.sender, value);\r\n\r\n    totalReserves = totalReserves.sub(value);\r\n    emit ReservesUpdated(totalReserves);\r\n\r\n    IERC20(_token).safeTransfer(msg.sender, _amount);\r\n\r\n    emit Withdrawal(_token, _amount, value);\r\n  }\r\n\r\n  /**\r\n        @notice allow approved address to borrow reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n  function incurDebt(uint256 _amount, address _token) external {\r\n    require(isDebtor[msg.sender], \"Not approved\");\r\n    require(isReserveToken[_token], \"Not accepted\");\r\n\r\n    uint256 value = valueOfToken(_token, _amount);\r\n\r\n    uint256 maximumDebt = IERC20(sOHM).balanceOf(msg.sender); // Can only borrow against sOHM held\r\n    uint256 availableDebt = maximumDebt.sub(debtorBalance[msg.sender]);\r\n    require(value <= availableDebt, \"Exceeds debt limit\");\r\n\r\n    debtorBalance[msg.sender] = debtorBalance[msg.sender].add(value);\r\n    totalDebt = totalDebt.add(value);\r\n\r\n    totalReserves = totalReserves.sub(value);\r\n    emit ReservesUpdated(totalReserves);\r\n\r\n    IERC20(_token).transfer(msg.sender, _amount);\r\n\r\n    emit CreateDebt(msg.sender, _token, _amount, value);\r\n  }\r\n\r\n  /**\r\n        @notice allow approved address to repay borrowed reserves with reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n  function repayDebtWithReserve(uint256 _amount, address _token) external {\r\n    require(isDebtor[msg.sender], \"Not approved\");\r\n    require(isReserveToken[_token], \"Not accepted\");\r\n\r\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n    uint256 value = valueOfToken(_token, _amount);\r\n    debtorBalance[msg.sender] = debtorBalance[msg.sender].sub(value);\r\n    totalDebt = totalDebt.sub(value);\r\n\r\n    totalReserves = totalReserves.add(value);\r\n    emit ReservesUpdated(totalReserves);\r\n\r\n    emit RepayDebt(msg.sender, _token, _amount, value);\r\n  }\r\n\r\n  /**\r\n        @notice allow approved address to repay borrowed reserves with OHM\r\n        @param _amount uint\r\n     */\r\n  function repayDebtWithOHM(uint256 _amount) external {\r\n    require(isDebtor[msg.sender], \"Not approved\");\r\n\r\n    IOHMERC20(OHM).burnFrom(msg.sender, _amount);\r\n\r\n    debtorBalance[msg.sender] = debtorBalance[msg.sender].sub(_amount);\r\n    totalDebt = totalDebt.sub(_amount);\r\n\r\n    emit RepayDebt(msg.sender, OHM, _amount, _amount);\r\n  }\r\n\r\n  /**\r\n        @notice allow approved address to withdraw assets\r\n        @param _token address\r\n        @param _amount uint\r\n     */\r\n  function manage(address _token, uint256 _amount) external {\r\n    if (isLiquidityToken[_token]) {\r\n      require(isLiquidityManager[msg.sender], \"Not approved\");\r\n    } else {\r\n      require(isReserveManager[msg.sender], \"Not approved\");\r\n    }\r\n\r\n    uint256 value = valueOfToken(_token, _amount);\r\n    (_token, _amount);\r\n    require(value <= excessReserves(), \"Insufficient reserves\");\r\n\r\n    totalReserves = totalReserves.sub(value);\r\n    emit ReservesUpdated(totalReserves);\r\n\r\n    IERC20(_token).safeTransfer(msg.sender, _amount);\r\n\r\n    emit ReservesManaged(_token, _amount);\r\n  }\r\n\r\n  /**\r\n        @notice send epoch reward to staking contract\r\n     */\r\n  function mintRewards(address _recipient, uint256 _amount) external {\r\n    require(isRewardManager[msg.sender], \"Not approved\");\r\n    require(_amount <= excessReserves(), \"Insufficient reserves\");\r\n\r\n    IERC20Mintable(OHM).mint(_recipient, _amount);\r\n\r\n    emit RewardsMinted(msg.sender, _recipient, _amount);\r\n  }\r\n\r\n  /**\r\n        @notice returns excess reserves not backing tokens\r\n        @return uint\r\n     */\r\n  function excessReserves() public view returns (uint256) {\r\n    return totalReserves.sub(IERC20(OHM).totalSupply().sub(totalDebt));\r\n  }\r\n\r\n  /**\r\n        @notice takes inventory of all tracked assets\r\n        @notice always consolidate to recognized reserves before audit\r\n     */\r\n  function auditReserves() external onlyManager {\r\n    uint256 reserves;\r\n    for (uint256 i = 0; i < reserveTokens.length; i++) {\r\n      reserves = reserves.add(\r\n        valueOfToken(\r\n          reserveTokens[i],\r\n          IERC20(reserveTokens[i]).balanceOf(address(this))\r\n        )\r\n      );\r\n    }\r\n    for (uint256 i = 0; i < liquidityTokens.length; i++) {\r\n      reserves = reserves.add(\r\n        valueOfToken(\r\n          liquidityTokens[i],\r\n          IERC20(liquidityTokens[i]).balanceOf(address(this))\r\n        )\r\n      );\r\n    }\r\n    totalReserves = reserves;\r\n    emit ReservesUpdated(reserves);\r\n    emit ReservesAudited(reserves);\r\n  }\r\n\r\n  /**\r\n        @notice returns OHM valuation of asset\r\n        @param _token address\r\n        @param _amount uint\r\n        @return value_ uint\r\n     */\r\n  function valueOfToken(address _token, uint256 _amount)\r\n    public\r\n    view\r\n    returns (uint256 value_)\r\n  {\r\n    if (isReserveToken[_token]) {\r\n      // convert amount to match OHM decimals\r\n      value_ = _amount.mul(10**IERC20(OHM).decimals()).div(\r\n        10**IERC20(_token).decimals()\r\n      );\r\n    } else if (isLiquidityToken[_token]) {\r\n      value_ = IBondCalculator(bondCalculator[_token]).valuation(\r\n        _token,\r\n        _amount\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n        @notice queue address to change boolean in mapping\r\n        @param _managing MANAGING\r\n        @param _address address\r\n        @return bool\r\n     */\r\n  function queue(MANAGING _managing, address _address)\r\n    external\r\n    onlyManager\r\n    returns (bool)\r\n  {\r\n    require(_address != address(0));\r\n    if (_managing == MANAGING.RESERVEDEPOSITOR) {\r\n      // 0\r\n      reserveDepositorQueue[_address] = block.number.add(blocksNeededForQueue);\r\n    } else if (_managing == MANAGING.RESERVESPENDER) {\r\n      // 1\r\n      reserveSpenderQueue[_address] = block.number.add(blocksNeededForQueue);\r\n    } else if (_managing == MANAGING.RESERVETOKEN) {\r\n      // 2\r\n      reserveTokenQueue[_address] = block.number.add(blocksNeededForQueue);\r\n    } else if (_managing == MANAGING.RESERVEMANAGER) {\r\n      // 3\r\n      ReserveManagerQueue[_address] = block.number.add(\r\n        blocksNeededForQueue.mul(2)\r\n      );\r\n    } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\r\n      // 4\r\n      LiquidityDepositorQueue[_address] = block.number.add(\r\n        blocksNeededForQueue\r\n      );\r\n    } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\r\n      // 5\r\n      LiquidityTokenQueue[_address] = block.number.add(blocksNeededForQueue);\r\n    } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\r\n      // 6\r\n      LiquidityManagerQueue[_address] = block.number.add(\r\n        blocksNeededForQueue.mul(2)\r\n      );\r\n    } else if (_managing == MANAGING.DEBTOR) {\r\n      // 7\r\n      debtorQueue[_address] = block.number.add(blocksNeededForQueue);\r\n    } else if (_managing == MANAGING.REWARDMANAGER) {\r\n      // 8\r\n      rewardManagerQueue[_address] = block.number.add(blocksNeededForQueue);\r\n    } else if (_managing == MANAGING.SOHM) {\r\n      // 9\r\n      sOHMQueue = block.number.add(blocksNeededForQueue);\r\n    } else return false;\r\n\r\n    emit ChangeQueued(_managing, _address);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n        @notice verify queue then set boolean in mapping\r\n        @param _managing MANAGING\r\n        @param _address address\r\n        @param _calculator address\r\n        @return bool\r\n     */\r\n  function toggle(\r\n    MANAGING _managing,\r\n    address _address,\r\n    address _calculator\r\n  ) external onlyManager returns (bool) {\r\n    require(_address != address(0));\r\n    bool result;\r\n    if (_managing == MANAGING.RESERVEDEPOSITOR) {\r\n      // 0\r\n      if (requirements(reserveDepositorQueue, isReserveDepositor, _address)) {\r\n        reserveDepositorQueue[_address] = 0;\r\n        if (!listContains(reserveDepositors, _address)) {\r\n          reserveDepositors.push(_address);\r\n        }\r\n      }\r\n      result = !isReserveDepositor[_address];\r\n      isReserveDepositor[_address] = result;\r\n    } else if (_managing == MANAGING.RESERVESPENDER) {\r\n      // 1\r\n      if (requirements(reserveSpenderQueue, isReserveSpender, _address)) {\r\n        reserveSpenderQueue[_address] = 0;\r\n        if (!listContains(reserveSpenders, _address)) {\r\n          reserveSpenders.push(_address);\r\n        }\r\n      }\r\n      result = !isReserveSpender[_address];\r\n      isReserveSpender[_address] = result;\r\n    } else if (_managing == MANAGING.RESERVETOKEN) {\r\n      // 2\r\n      if (requirements(reserveTokenQueue, isReserveToken, _address)) {\r\n        reserveTokenQueue[_address] = 0;\r\n        if (!listContains(reserveTokens, _address)) {\r\n          reserveTokens.push(_address);\r\n        }\r\n      }\r\n      result = !isReserveToken[_address];\r\n      isReserveToken[_address] = result;\r\n    } else if (_managing == MANAGING.RESERVEMANAGER) {\r\n      // 3\r\n      if (requirements(ReserveManagerQueue, isReserveManager, _address)) {\r\n        reserveManagers.push(_address);\r\n        ReserveManagerQueue[_address] = 0;\r\n        if (!listContains(reserveManagers, _address)) {\r\n          reserveManagers.push(_address);\r\n        }\r\n      }\r\n      result = !isReserveManager[_address];\r\n      isReserveManager[_address] = result;\r\n    } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\r\n      // 4\r\n      if (\r\n        requirements(LiquidityDepositorQueue, isLiquidityDepositor, _address)\r\n      ) {\r\n        liquidityDepositors.push(_address);\r\n        LiquidityDepositorQueue[_address] = 0;\r\n        if (!listContains(liquidityDepositors, _address)) {\r\n          liquidityDepositors.push(_address);\r\n        }\r\n      }\r\n      result = !isLiquidityDepositor[_address];\r\n      isLiquidityDepositor[_address] = result;\r\n    } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\r\n      // 5\r\n      if (requirements(LiquidityTokenQueue, isLiquidityToken, _address)) {\r\n        LiquidityTokenQueue[_address] = 0;\r\n        if (!listContains(liquidityTokens, _address)) {\r\n          liquidityTokens.push(_address);\r\n        }\r\n      }\r\n      result = !isLiquidityToken[_address];\r\n      isLiquidityToken[_address] = result;\r\n      bondCalculator[_address] = _calculator;\r\n    } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\r\n      // 6\r\n      if (requirements(LiquidityManagerQueue, isLiquidityManager, _address)) {\r\n        LiquidityManagerQueue[_address] = 0;\r\n        if (!listContains(liquidityManagers, _address)) {\r\n          liquidityManagers.push(_address);\r\n        }\r\n      }\r\n      result = !isLiquidityManager[_address];\r\n      isLiquidityManager[_address] = result;\r\n    } else if (_managing == MANAGING.DEBTOR) {\r\n      // 7\r\n      if (requirements(debtorQueue, isDebtor, _address)) {\r\n        debtorQueue[_address] = 0;\r\n        if (!listContains(debtors, _address)) {\r\n          debtors.push(_address);\r\n        }\r\n      }\r\n      result = !isDebtor[_address];\r\n      isDebtor[_address] = result;\r\n    } else if (_managing == MANAGING.REWARDMANAGER) {\r\n      // 8\r\n      if (requirements(rewardManagerQueue, isRewardManager, _address)) {\r\n        rewardManagerQueue[_address] = 0;\r\n        if (!listContains(rewardManagers, _address)) {\r\n          rewardManagers.push(_address);\r\n        }\r\n      }\r\n      result = !isRewardManager[_address];\r\n      isRewardManager[_address] = result;\r\n    } else if (_managing == MANAGING.SOHM) {\r\n      // 9\r\n      sOHMQueue = 0;\r\n      sOHM = _address;\r\n      result = true;\r\n    } else return false;\r\n\r\n    emit ChangeActivated(_managing, _address, result);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n        @notice checks requirements and returns altered structs\r\n        @param queue_ mapping( address => uint )\r\n        @param status_ mapping( address => bool )\r\n        @param _address address\r\n        @return bool \r\n     */\r\n  function requirements(\r\n    mapping(address => uint256) storage queue_,\r\n    mapping(address => bool) storage status_,\r\n    address _address\r\n  ) internal view returns (bool) {\r\n    if (!status_[_address]) {\r\n      require(queue_[_address] != 0, \"Must queue\");\r\n      require(queue_[_address] <= block.number, \"Queue not expired\");\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n        @notice checks array to ensure against duplicate\r\n        @param _list address[]\r\n        @param _token address\r\n        @return bool\r\n     */\r\n  function listContains(address[] storage _list, address _token)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    for (uint256 i = 0; i < _list.length; i++) {\r\n      if (_list[i] == _token) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n"
    },
    "contracts/mocks/WrappedToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract WrappedToken is ERC20, ERC20Pausable {\r\n    // Error Code: No error.\r\n    uint256 public constant ERR_NO_ERROR = 0x0;\r\n\r\n    // Error Code: Non-zero value expected to perform the function.\r\n    uint256 public constant ERR_INVALID_ZERO_VALUE = 0x01;\r\n\r\n    constructor (string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\r\n\r\n    function name() public view override returns (string memory) {\r\n        return \"Wrapped Token\";\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return \"WTOKEN\";\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    // deposit wraps received FTM tokens as wFTM in 1:1 ratio by minting\r\n    // the received amount of FTMs in wFTM on the sender's address.\r\n    function deposit() public whenNotPaused payable returns (uint256) {\r\n        // there has to be some value to be converted\r\n        if (msg.value == 0) {\r\n            return ERR_INVALID_ZERO_VALUE;\r\n        }\r\n\r\n        // we already received FTMs, mint the appropriate amount of wFTM\r\n        _mint(msg.sender, msg.value);\r\n\r\n        // all went well here\r\n        return ERR_NO_ERROR;\r\n    }\r\n\r\n    // withdraw unwraps FTM tokens by burning specified amount\r\n    // of wFTM from the caller address and sending the same amount\r\n    // of FTMs back in exchange.\r\n    function withdraw(uint256 amount) public whenNotPaused returns (uint256) {\r\n        // there has to be some value to be converted\r\n        if (amount == 0) {\r\n            return ERR_INVALID_ZERO_VALUE;\r\n        }\r\n\r\n        // burn wFTM from the sender first to prevent re-entrance issue\r\n        _burn(msg.sender, amount);\r\n\r\n        // if wFTM were burned, transfer native tokens back to the sender\r\n        msg.sender.transfer(amount);\r\n\r\n        // all went well here\r\n        return ERR_NO_ERROR;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override(ERC20, ERC20Pausable) {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n     }\r\n}"
    },
    "contracts/OlympusERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\nlibrary EnumerableSet {\r\n\r\n  // To implement this library for multiple types with as little code\r\n  // repetition as possible, we write it in terms of a generic Set type with\r\n  // bytes32 values.\r\n  // The Set implementation uses private functions, and user-facing\r\n  // implementations (such as AddressSet) are just wrappers around the\r\n  // underlying Set.\r\n  // This means that we can only create new EnumerableSets for types that fit\r\n  // in bytes32.\r\n  struct Set {\r\n    // Storage of set values\r\n    bytes32[] _values;\r\n\r\n    // Position of the value in the `values` array, plus 1 because index 0\r\n    // means a value is not in the set.\r\n    mapping (bytes32 => uint256) _indexes;\r\n  }\r\n\r\n  /**\r\n   * @dev Add a value to a set. O(1).\r\n   *\r\n   * Returns true if the value was added to the set, that is if it was not\r\n   * already present.\r\n   */\r\n  function _add(Set storage set, bytes32 value) private returns (bool) {\r\n    if (!_contains(set, value)) {\r\n      set._values.push(value);\r\n      // The value is stored at length-1, but we add 1 to all indexes\r\n      // and use 0 as a sentinel value\r\n      set._indexes[value] = set._values.length;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a value from a set. O(1).\r\n   *\r\n   * Returns true if the value was removed from the set, that is if it was\r\n   * present.\r\n   */\r\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n    // We read and store the value's index to prevent multiple reads from the same storage slot\r\n    uint256 valueIndex = set._indexes[value];\r\n\r\n    if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n      // This modifies the order of the array, as noted in {at}.\r\n\r\n      uint256 toDeleteIndex = valueIndex - 1;\r\n      uint256 lastIndex = set._values.length - 1;\r\n\r\n      // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n      // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n      bytes32 lastvalue = set._values[lastIndex];\r\n\r\n      // Move the last value to the index where the value to delete is\r\n      set._values[toDeleteIndex] = lastvalue;\r\n      // Update the index for the moved value\r\n      set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n      // Delete the slot where the moved value was stored\r\n      set._values.pop();\r\n\r\n      // Delete the index for the deleted slot\r\n      delete set._indexes[value];\r\n\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the value is in the set. O(1).\r\n   */\r\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n    return set._indexes[value] != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of values on the set. O(1).\r\n   */\r\n  function _length(Set storage set) private view returns (uint256) {\r\n    return set._values.length;\r\n  }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n    require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n    return set._values[index];\r\n  }\r\n\r\n  function _getValues( Set storage set_ ) private view returns ( bytes32[] storage ) {\r\n    return set_._values;\r\n  }\r\n\r\n  // TODO needs insert function that maintains order.\r\n  // TODO needs NatSpec documentation comment.\r\n  /**\r\n   * Inserts new value by moving existing value at provided index to end of array and setting provided value at provided index\r\n   */\r\n  function _insert(Set storage set_, uint256 index_, bytes32 valueToInsert_ ) private returns ( bool ) {\r\n    require(  set_._values.length > index_ );\r\n    require( !_contains( set_, valueToInsert_ ), \"Remove value you wish to insert if you wish to reorder array.\" );\r\n    bytes32 existingValue_ = _at( set_, index_ );\r\n    set_._values[index_] = valueToInsert_;\r\n    return _add( set_, existingValue_);\r\n  }\r\n\r\n  struct Bytes4Set {\r\n    Set _inner;\r\n  }\r\n\r\n  /**\r\n   * @dev Add a value to a set. O(1).\r\n   *\r\n   * Returns true if the value was added to the set, that is if it was not\r\n   * already present.\r\n   */\r\n  function add(Bytes4Set storage set, bytes4 value) internal returns (bool) {\r\n    return _add(set._inner, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a value from a set. O(1).\r\n   *\r\n   * Returns true if the value was removed from the set, that is if it was\r\n   * present.\r\n   */\r\n  function remove(Bytes4Set storage set, bytes4 value) internal returns (bool) {\r\n    return _remove(set._inner, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the value is in the set. O(1).\r\n   */\r\n  function contains(Bytes4Set storage set, bytes4 value) internal view returns (bool) {\r\n    return _contains(set._inner, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of values on the set. O(1).\r\n   */\r\n  function length(Bytes4Set storage set) internal view returns (uint256) {\r\n    return _length(set._inner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the value stored at position `index` in the set. O(1).\r\n   *\r\n   * Note that there are no guarantees on the ordering of values inside the\r\n   * array, and it may change when more values are added or removed.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `index` must be strictly less than {length}.\r\n   */\r\n  function at(Bytes4Set storage set, uint256 index) internal view returns ( bytes4 ) {\r\n    return bytes4( _at( set._inner, index ) );\r\n  }\r\n\r\n  function getValues( Bytes4Set storage set_ ) internal view returns ( bytes4[] memory ) {\r\n    bytes4[] memory bytes4Array_;\r\n    for( uint256 iteration_ = 0; _length( set_._inner ) > iteration_; iteration_++ ) {\r\n      bytes4Array_[iteration_] = bytes4( _at( set_._inner, iteration_ ) );\r\n    }\r\n    return bytes4Array_;\r\n  }\r\n\r\n  function insert( Bytes4Set storage set_, uint256 index_, bytes4 valueToInsert_ ) internal returns ( bool ) {\r\n    return _insert( set_._inner, index_, valueToInsert_ );\r\n  }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns ( bytes32 ) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n  function getValues( Bytes32Set storage set_ ) internal view returns ( bytes4[] memory ) {\r\n    bytes4[] memory bytes4Array_;\r\n\r\n      for( uint256 iteration_ = 0; _length( set_._inner ) >= iteration_; iteration_++ ){\r\n        bytes4Array_[iteration_] = bytes4( at( set_, iteration_ ) );\r\n      }\r\n\r\n      return bytes4Array_;\r\n  }\r\n\r\n  function insert( Bytes32Set storage set_, uint256 index_, bytes32 valueToInsert_ ) internal returns ( bool ) {\r\n    return _insert( set_._inner, index_, valueToInsert_ );\r\n  }\r\n\r\n  // AddressSet\r\n  struct AddressSet {\r\n    Set _inner;\r\n  }\r\n\r\n  /**\r\n   * @dev Add a value to a set. O(1).\r\n   *\r\n   * Returns true if the value was added to the set, that is if it was not\r\n   * already present.\r\n   */\r\n  function add(AddressSet storage set, address value) internal returns (bool) {\r\n    return _add(set._inner, bytes32(uint256(value)));\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a value from a set. O(1).\r\n   *\r\n   * Returns true if the value was removed from the set, that is if it was\r\n   * present.\r\n   */\r\n  function remove(AddressSet storage set, address value) internal returns (bool) {\r\n    return _remove(set._inner, bytes32(uint256(value)));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the value is in the set. O(1).\r\n   */\r\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n    return _contains(set._inner, bytes32(uint256(value)));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of values in the set. O(1).\r\n   */\r\n  function length(AddressSet storage set) internal view returns (uint256) {\r\n    return _length(set._inner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the value stored at position `index` in the set. O(1).\r\n   *\r\n   * Note that there are no guarantees on the ordering of values inside the\r\n   * array, and it may change when more values are added or removed.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `index` must be strictly less than {length}.\r\n   */\r\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n    return address(uint256(_at(set._inner, index)));\r\n  }\r\n\r\n  /**\r\n   * TODO Might require explicit conversion of bytes32[] to address[].\r\n   *  Might require iteration.\r\n   */\r\n  function getValues( AddressSet storage set_ ) internal view returns ( address[] memory ) {\r\n\r\n    address[] memory addressArray;\r\n\r\n    for( uint256 iteration_ = 0; _length(set_._inner) >= iteration_; iteration_++ ){\r\n      addressArray[iteration_] = at( set_, iteration_ );\r\n    }\r\n\r\n    return addressArray;\r\n  }\r\n\r\n  function insert(AddressSet storage set_, uint256 index_, address valueToInsert_ ) internal returns ( bool ) {\r\n    return _insert( set_._inner, index_, bytes32(uint256(valueToInsert_)) );\r\n  }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    struct UInt256Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UInt256Set storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UInt256Set storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UInt256Set storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UInt256Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UInt256Set storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n\r\n    function percentageAmount( uint256 total_, uint8 percentage_ ) internal pure returns ( uint256 percentAmount_ ) {\r\n        return div( mul( total_, percentage_ ), 1000 );\r\n    }\r\n\r\n    function substractPercentage( uint256 total_, uint8 percentageToSub_ ) internal pure returns ( uint256 result_ ) {\r\n        return sub( total_, div( mul( total_, percentageToSub_ ), 1000 ) );\r\n    }\r\n\r\n    function percentageOfTotal( uint256 part_, uint256 total_ ) internal pure returns ( uint256 percent_ ) {\r\n        return div( mul(part_, 100) , total_ );\r\n    }\r\n\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    function quadraticPricing( uint256 payment_, uint256 multiplier_ ) internal pure returns (uint256) {\r\n        return sqrrt( mul( multiplier_, payment_ ) );\r\n    }\r\n\r\n  function bondingCurve( uint256 supply_, uint256 multiplier_ ) internal pure returns (uint256) {\r\n      return mul( multiplier_, supply_ );\r\n  }\r\n}\r\n\r\nabstract contract ERC20 is IERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // TODO comment actual hash value.\r\n  bytes32 constant private ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256( \"ERC20Token\" );\r\n\r\n  // Present in ERC777\r\n  mapping (address => uint256) internal _balances;\r\n\r\n  // Present in ERC777\r\n  mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n  // Present in ERC777\r\n  uint256 internal _totalSupply;\r\n\r\n  // Present in ERC777\r\n  string internal _name;\r\n\r\n  // Present in ERC777\r\n  string internal _symbol;\r\n\r\n  // Present in ERC777\r\n  uint8 internal _decimals;\r\n\r\n  constructor (string memory name_, string memory symbol_, uint8 decimals_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _decimals = decimals_;\r\n  }\r\n\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n      require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n      require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n      _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n      _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n      _balances[recipient] = _balances[recipient].add(amount);\r\n      emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account_, uint256 amount_) internal virtual {\r\n        require(account_ != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address( this ), account_, amount_);\r\n        _totalSupply = _totalSupply.add(amount_);\r\n        _balances[account_] = _balances[account_].add(amount_);\r\n        emit Transfer(address( this ), account_, amount_);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n  function _beforeTokenTransfer( address from_, address to_, uint256 amount_ ) internal virtual { }\r\n}\r\n\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\ninterface IERC2612Permit {\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\r\n    using Counters for Counters.Counter;\r\n\r\n    mapping(address => Counters.Counter) private _nonces;\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    constructor() {\r\n        uint256 chainID;\r\n        assembly {\r\n            chainID := chainid()\r\n        }\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name())),\r\n                keccak256(bytes(\"1\")), // Version\r\n                chainID,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual override {\r\n        require(block.timestamp <= deadline, \"Permit: expired deadline\");\r\n\r\n        bytes32 hashStruct =\r\n            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline));\r\n\r\n        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\r\n\r\n        address signer = ecrecover(_hash, v, r, s);\r\n        require(signer != address(0) && signer == owner, \"ZeroSwapPermit: Invalid signature\");\r\n\r\n        _nonces[owner].increment();\r\n        _approve(owner, spender, amount);\r\n    }\r\n\r\n    function nonces(address owner) public view override returns (uint256) {\r\n        return _nonces[owner].current();\r\n    }\r\n}\r\n\r\ninterface IOwnable {\r\n  function owner() external view returns (address);\r\n\r\n  function renounceOwnership() external;\r\n\r\n  function transferOwnership( address newOwner_ ) external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n  address internal _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred( address(0), _owner );\r\n  }\r\n\r\n  function owner() public view override returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual override onlyOwner() {\r\n    emit OwnershipTransferred( _owner, address(0) );\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership( address newOwner_ ) public virtual override onlyOwner() {\r\n    require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred( _owner, newOwner_ );\r\n    _owner = newOwner_;\r\n  }\r\n}\r\n\r\ncontract VaultOwned is Ownable {\r\n\r\n  address internal _vault;\r\n\r\n  function setVault( address vault_ ) external onlyOwner() returns ( bool ) {\r\n    _vault = vault_;\r\n\r\n    return true;\r\n  }\r\n\r\n  function vault() public view returns (address) {\r\n    return _vault;\r\n  }\r\n\r\n  modifier onlyVault() {\r\n    require( _vault == msg.sender, \"VaultOwned: caller is not the Vault\" );\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract OlympusERC20Token is ERC20Permit, VaultOwned {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol, 9) {\r\n    }\r\n\r\n    function mint(address account_, uint256 amount_) external onlyVault() {\r\n        _mint(account_, amount_);\r\n    }\r\n\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function burnFrom(address account_, uint256 amount_) public virtual {\r\n        _burnFrom(account_, amount_);\r\n    }\r\n\r\n    function _burnFrom(address account_, uint256 amount_) public virtual {\r\n        uint256 decreasedAllowance_ =\r\n            allowance(account_, msg.sender).sub(\r\n                amount_,\r\n                \"ERC20: burn amount exceeds allowance\"\r\n            );\r\n\r\n        _approve(account_, msg.sender, decreasedAllowance_);\r\n        _burn(account_, amount_);\r\n    }\r\n}"
    },
    "contracts/RedeemHelper.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n  function policy() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function policy() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyPolicy() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ninterface IBond {\r\n    function redeem( address _recipient, bool _stake ) external returns ( uint );\r\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ );\r\n}\r\n\r\ncontract RedeemHelper is Ownable {\r\n\r\n    address[] public bonds;\r\n\r\n    function redeemAll( address _recipient, bool _stake ) external {\r\n        for( uint i = 0; i < bonds.length; i++ ) {\r\n            if ( bonds[i] != address(0) ) {\r\n                if ( IBond( bonds[i] ).pendingPayoutFor( _recipient ) > 0 ) {\r\n                    IBond( bonds[i] ).redeem( _recipient, _stake );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function addBondContract( address _bond ) external onlyPolicy() {\r\n        require( _bond != address(0) );\r\n        bonds.push( _bond );\r\n    }\r\n\r\n    function removeBondContract( uint _index ) external onlyPolicy() {\r\n        bonds[ _index ] = address(0);\r\n    }\r\n}"
    },
    "contracts/sOlympusERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Expects percentage to be trailed by 00,\r\n    */\r\n    function percentageAmount( uint256 total_, uint8 percentage_ ) internal pure returns ( uint256 percentAmount_ ) {\r\n        return div( mul( total_, percentage_ ), 1000 );\r\n    }\r\n\r\n    /*\r\n     * Expects percentage to be trailed by 00,\r\n    */\r\n    function substractPercentage( uint256 total_, uint8 percentageToSub_ ) internal pure returns ( uint256 result_ ) {\r\n        return sub( total_, div( mul( total_, percentageToSub_ ), 1000 ) );\r\n    }\r\n\r\n    function percentageOfTotal( uint256 part_, uint256 total_ ) internal pure returns ( uint256 percent_ ) {\r\n        return div( mul(part_, 100) , total_ );\r\n    }\r\n\r\n    /**\r\n     * Taken from Hypersonic https://github.com/M2629/HyperSonic/blob/main/Math.sol\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    function quadraticPricing( uint256 payment_, uint256 multiplier_ ) internal pure returns (uint256) {\r\n        return sqrrt( mul( multiplier_, payment_ ) );\r\n    }\r\n\r\n  function bondingCurve( uint256 supply_, uint256 multiplier_ ) internal pure returns (uint256) {\r\n      return mul( multiplier_, supply_ );\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n    //     require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    //     return _functionCallWithValue(target, data, value, errorMessage);\r\n    // }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n  /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ERC20\r\n  is\r\n    IERC20\r\n  {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // TODO comment actual hash value.\r\n  bytes32 constant private ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256( \"ERC20Token\" );\r\n\r\n  // Present in ERC777\r\n  mapping (address => uint256) internal _balances;\r\n\r\n  // Present in ERC777\r\n  mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n  // Present in ERC777\r\n  uint256 internal _totalSupply;\r\n\r\n  // Present in ERC777\r\n  string internal _name;\r\n\r\n  // Present in ERC777\r\n  string internal _symbol;\r\n\r\n  // Present in ERC777\r\n  uint8 internal _decimals;\r\n\r\n  /**\r\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n   * a default value of 18.\r\n   *\r\n   * To select a different value for {decimals}, use {_setupDecimals}.\r\n   *\r\n   * All three of these values are immutable: they can only be set once during\r\n   * construction.\r\n   */\r\n  constructor (string memory name_, string memory symbol_, uint8 decimals_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _decimals = decimals_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  // Present in ERC777\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  // Present in ERC777\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n   * called.\r\n   *\r\n   * NOTE: This information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * {IERC20-balanceOf} and {IERC20-transfer}.\r\n   */\r\n  // Present in ERC777\r\n  function decimals() public view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-totalSupply}.\r\n   */\r\n  // Present in ERC777\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-balanceOf}.\r\n   */\r\n  // Present in ERC777\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  // Overrideen in ERC777\r\n  // Confirm that this behavior changes\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    // Present in ERC777\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    // Present in ERC777\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    // Present in ERC777\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n   *\r\n   * This is internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    // Present in ERC777\r\n    function _mint(address account_, uint256 ammount_) internal virtual {\r\n        require(account_ != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address( this ), account_, ammount_);\r\n        _totalSupply = _totalSupply.add(ammount_);\r\n        _balances[account_] = _balances[account_].add(ammount_);\r\n        emit Transfer(address( this ), account_, ammount_);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    // Present in ERC777\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    // Present in ERC777\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    // Considering deprication to reduce size of bytecode as changing _decimals to internal acheived the same functionality.\r\n    // function _setupDecimals(uint8 decimals_) internal {\r\n    //     _decimals = decimals_;\r\n    // }\r\n\r\n  /**\r\n   * @dev Hook that is called before any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * will be to transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  // Present in ERC777\r\n  function _beforeTokenTransfer( address from_, address to_, uint256 amount_ ) internal virtual { }\r\n}\r\n\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\ninterface IERC2612Permit {\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\r\n     * given `owner`'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\r\n    using Counters for Counters.Counter;\r\n\r\n    mapping(address => Counters.Counter) private _nonces;\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    constructor() {\r\n\r\n        uint256 chainID;\r\n        assembly {\r\n            chainID := chainid()\r\n        }\r\n\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\r\n            keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n            keccak256(bytes(name())),\r\n            keccak256(bytes(\"1\")), // Version\r\n            chainID,\r\n            address(this)\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC2612Permit-permit}.\r\n     *\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual override {\r\n        require(block.timestamp <= deadline, \"Permit: expired deadline\");\r\n\r\n        bytes32 hashStruct =\r\n            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline));\r\n\r\n        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\r\n\r\n        address signer = ecrecover(_hash, v, r, s);\r\n        require(signer != address(0) && signer == owner, \"ZeroSwapPermit: Invalid signature\");\r\n\r\n        _nonces[owner].increment();\r\n        _approve(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC2612Permit-nonces}.\r\n     */\r\n    function nonces(address owner) public view override returns (uint256) {\r\n        return _nonces[owner].current();\r\n    }\r\n}\r\n\r\ninterface IOwnable {\r\n  function manager() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n\r\n  function pushManagement( address newOwner_ ) external;\r\n\r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function manager() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyManager() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n\r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract sOlympus is ERC20Permit, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    modifier onlyStakingContract() {\r\n        require( msg.sender == stakingContract );\r\n        _;\r\n    }\r\n\r\n    address public stakingContract;\r\n    address public initializer;\r\n\r\n    event LogSupply(uint256 indexed epoch, uint256 timestamp, uint256 totalSupply );\r\n    event LogRebase( uint256 indexed epoch, uint256 rebase, uint256 index );\r\n    event LogStakingContractUpdated( address stakingContract );\r\n\r\n    struct Rebase {\r\n        uint epoch;\r\n        uint rebase; // 18 decimals\r\n        uint totalStakedBefore;\r\n        uint totalStakedAfter;\r\n        uint amountRebased;\r\n        uint index;\r\n        uint blockNumberOccured;\r\n    }\r\n    Rebase[] public rebases;\r\n\r\n    uint public INDEX;\r\n\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 5000000 * 10**9;\r\n\r\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\r\n    // Use the highest value that fits in a uint256 for max granularity.\r\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n\r\n    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);  // (2^128) - 1\r\n\r\n    uint256 private _gonsPerFragment;\r\n    mapping(address => uint256) private _gonBalances;\r\n\r\n    mapping ( address => mapping ( address => uint256 ) ) private _allowedValue;\r\n\r\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol, 9) ERC20Permit() {\r\n        initializer = msg.sender;\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n    }\r\n\r\n    function initialize( address stakingContract_ ) external returns ( bool ) {\r\n        require( msg.sender == initializer );\r\n        require( stakingContract_ != address(0) );\r\n        stakingContract = stakingContract_;\r\n        _gonBalances[ stakingContract ] = TOTAL_GONS;\r\n\r\n        emit Transfer( address(0x0), stakingContract, _totalSupply );\r\n        emit LogStakingContractUpdated( stakingContract_ );\r\n\r\n        initializer = address(0);\r\n        return true;\r\n    }\r\n\r\n    function setIndex( uint _INDEX ) external onlyManager() returns ( bool ) {\r\n        require( INDEX == 0 );\r\n        INDEX = gonsForBalance( _INDEX );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice increases sOHM supply to increase staking balances relative to profit_\r\n        @param profit_ uint256\r\n        @return uint256\r\n     */\r\n    function rebase( uint256 profit_, uint epoch_ ) public onlyStakingContract() returns ( uint256 ) {\r\n        uint256 rebaseAmount;\r\n        uint256 circulatingSupply_ = circulatingSupply();\r\n\r\n        if ( profit_ == 0 ) {\r\n            emit LogSupply( epoch_, block.timestamp, _totalSupply );\r\n            emit LogRebase( epoch_, 0, index() );\r\n            return _totalSupply;\r\n        } else if ( circulatingSupply_ > 0 ){\r\n            rebaseAmount = profit_.mul( _totalSupply ).div( circulatingSupply_ );\r\n        } else {\r\n            rebaseAmount = profit_;\r\n        }\r\n\r\n        _totalSupply = _totalSupply.add( rebaseAmount );\r\n\r\n        if ( _totalSupply > MAX_SUPPLY ) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div( _totalSupply );\r\n\r\n        _storeRebase( circulatingSupply_, profit_, epoch_ );\r\n\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n        @notice emits event with data about rebase\r\n        @param previousCirculating_ uint\r\n        @param profit_ uint\r\n        @param epoch_ uint\r\n        @return bool\r\n     */\r\n    function _storeRebase( uint previousCirculating_, uint profit_, uint epoch_ ) internal returns ( bool ) {\r\n        uint rebasePercent = profit_.mul( 1e18 ).div( previousCirculating_ );\r\n\r\n        rebases.push( Rebase ( {\r\n            epoch: epoch_,\r\n            rebase: rebasePercent, // 18 decimals\r\n            totalStakedBefore: previousCirculating_,\r\n            totalStakedAfter: circulatingSupply(),\r\n            amountRebased: profit_,\r\n            index: index(),\r\n            blockNumberOccured: block.number\r\n        }));\r\n\r\n        emit LogSupply( epoch_, block.timestamp, _totalSupply );\r\n        emit LogRebase( epoch_, rebasePercent, index() );\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf( address who ) public view override returns ( uint256 ) {\r\n        return _gonBalances[ who ].div( _gonsPerFragment );\r\n    }\r\n\r\n    function gonsForBalance( uint amount ) public view returns ( uint ) {\r\n        return amount.mul( _gonsPerFragment );\r\n    }\r\n\r\n    function balanceForGons( uint gons ) public view returns ( uint ) {\r\n        return gons.div( _gonsPerFragment );\r\n    }\r\n\r\n    // Staking contract holds excess sOHM\r\n    function circulatingSupply() public view returns ( uint ) {\r\n        return _totalSupply.sub( balanceOf( stakingContract ) );\r\n    }\r\n\r\n    function index() public view returns ( uint ) {\r\n        return balanceForGons( INDEX );\r\n    }\r\n\r\n    function transfer( address to, uint256 value ) public override returns (bool) {\r\n        uint256 gonValue = value.mul( _gonsPerFragment );\r\n        _gonBalances[ msg.sender ] = _gonBalances[ msg.sender ].sub( gonValue );\r\n        _gonBalances[ to ] = _gonBalances[ to ].add( gonValue );\r\n        emit Transfer( msg.sender, to, value );\r\n        return true;\r\n    }\r\n\r\n    function allowance( address owner_, address spender ) public view override returns ( uint256 ) {\r\n        return _allowedValue[ owner_ ][ spender ];\r\n    }\r\n\r\n    function transferFrom( address from, address to, uint256 value ) public override returns ( bool ) {\r\n       _allowedValue[ from ][ msg.sender ] = _allowedValue[ from ][ msg.sender ].sub( value );\r\n       emit Approval( from, msg.sender,  _allowedValue[ from ][ msg.sender ] );\r\n\r\n        uint256 gonValue = gonsForBalance( value );\r\n        _gonBalances[ from ] = _gonBalances[from].sub( gonValue );\r\n        _gonBalances[ to ] = _gonBalances[to].add( gonValue );\r\n        emit Transfer( from, to, value );\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve( address spender, uint256 value ) public override returns (bool) {\r\n         _allowedValue[ msg.sender ][ spender ] = value;\r\n         emit Approval( msg.sender, spender, value );\r\n         return true;\r\n    }\r\n\r\n    // What gets called in a permit\r\n    function _approve( address owner, address spender, uint256 value ) internal override virtual {\r\n        _allowedValue[owner][spender] = value;\r\n        emit Approval( owner, spender, value );\r\n    }\r\n\r\n    function increaseAllowance( address spender, uint256 addedValue ) public override returns (bool) {\r\n        _allowedValue[ msg.sender ][ spender ] = _allowedValue[ msg.sender ][ spender ].add( addedValue );\r\n        emit Approval( msg.sender, spender, _allowedValue[ msg.sender ][ spender ] );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance( address spender, uint256 subtractedValue ) public override returns (bool) {\r\n        uint256 oldValue = _allowedValue[ msg.sender ][ spender ];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedValue[ msg.sender ][ spender ] = 0;\r\n        } else {\r\n            _allowedValue[ msg.sender ][ spender ] = oldValue.sub( subtractedValue );\r\n        }\r\n        emit Approval( msg.sender, spender, _allowedValue[ msg.sender ][ spender ] );\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n  /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IOwnable {\r\n  function manager() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function manager() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyManager() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ninterface IsOHM {\r\n    function rebase( uint256 ohmProfit_, uint epoch_) external returns (uint256);\r\n\r\n    function circulatingSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function gonsForBalance( uint amount ) external view returns ( uint );\r\n\r\n    function balanceForGons( uint gons ) external view returns ( uint );\r\n    \r\n    function index() external view returns ( uint );\r\n}\r\n\r\ninterface IWarmup {\r\n    function retrieve( address staker_, uint amount_ ) external;\r\n}\r\n\r\ninterface IDistributor {\r\n    function distribute() external returns ( bool );\r\n}\r\n\r\ncontract OlympusStaking is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public immutable OHM;\r\n    address public immutable sOHM;\r\n\r\n    struct Epoch {\r\n        uint length;\r\n        uint number;\r\n        uint endTime;\r\n        uint distribute;\r\n    }\r\n    Epoch public epoch;\r\n\r\n    address public distributor;\r\n\r\n    address public locker;\r\n    uint public totalBonus;\r\n\r\n    address public warmupContract;\r\n    uint public warmupPeriod;\r\n\r\n    constructor (\r\n        address _OHM,\r\n        address _sOHM,\r\n        uint _epochLength,\r\n        uint _firstEpochNumber,\r\n        uint _firstEpochTime\r\n    ) {\r\n        require( _OHM != address(0) );\r\n        OHM = _OHM;\r\n        require( _sOHM != address(0) );\r\n        sOHM = _sOHM;\r\n\r\n        epoch = Epoch({\r\n            length: _epochLength,\r\n            number: _firstEpochNumber,\r\n            endTime: _firstEpochTime,\r\n            distribute: 0\r\n        });\r\n    }\r\n\r\n    struct Claim {\r\n        uint deposit;\r\n        uint gons;\r\n        uint expiry;\r\n        bool lock; // prevents malicious delays\r\n    }\r\n    mapping( address => Claim ) public warmupInfo;\r\n\r\n    /**\r\n        @notice stake OHM to enter warmup\r\n        @param _amount uint\r\n        @return bool\r\n     */\r\n    function stake( uint _amount, address _recipient ) external returns ( bool ) {\r\n        rebase();\r\n        \r\n        IERC20( OHM ).safeTransferFrom( msg.sender, address(this), _amount );\r\n\r\n        Claim memory info = warmupInfo[ _recipient ];\r\n        require( !info.lock, \"Deposits for account are locked\" );\r\n\r\n        warmupInfo[ _recipient ] = Claim ({\r\n            deposit: info.deposit.add( _amount ),\r\n            gons: info.gons.add( IsOHM( sOHM ).gonsForBalance( _amount ) ),\r\n            expiry: epoch.number.add( warmupPeriod ),\r\n            lock: false\r\n        });\r\n        \r\n        IERC20( sOHM ).safeTransfer( warmupContract, _amount );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice retrieve sOHM from warmup\r\n        @param _recipient address\r\n     */\r\n    function claim ( address _recipient ) external {\r\n        Claim memory info = warmupInfo[ _recipient ];\r\n        if ( epoch.number >= info.expiry && info.expiry != 0 ) {\r\n            delete warmupInfo[ _recipient ];\r\n            IWarmup( warmupContract ).retrieve( _recipient, IsOHM( sOHM ).balanceForGons( info.gons ) );\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice forfeit sOHM in warmup and retrieve OHM\r\n     */\r\n    function forfeit() external {\r\n        Claim memory info = warmupInfo[ msg.sender ];\r\n        delete warmupInfo[ msg.sender ];\r\n\r\n        IWarmup( warmupContract ).retrieve( address(this), IsOHM( sOHM ).balanceForGons( info.gons ) );\r\n        IERC20( OHM ).safeTransfer( msg.sender, info.deposit );\r\n    }\r\n\r\n    /**\r\n        @notice prevent new deposits to address (protection from malicious activity)\r\n     */\r\n    function toggleDepositLock() external {\r\n        warmupInfo[ msg.sender ].lock = !warmupInfo[ msg.sender ].lock;\r\n    }\r\n\r\n    /**\r\n        @notice redeem sOHM for OHM\r\n        @param _amount uint\r\n        @param _trigger bool\r\n     */\r\n    function unstake( uint _amount, bool _trigger ) external {\r\n        if ( _trigger ) {\r\n            rebase();\r\n        }\r\n        IERC20( sOHM ).safeTransferFrom( msg.sender, address(this), _amount );\r\n        IERC20( OHM ).safeTransfer( msg.sender, _amount );\r\n    }\r\n\r\n    /**\r\n        @notice returns the sOHM index, which tracks rebase growth\r\n        @return uint\r\n     */\r\n    function index() public view returns ( uint ) {\r\n        return IsOHM( sOHM ).index();\r\n    }\r\n\r\n    /**\r\n        @notice trigger rebase if epoch over\r\n     */\r\n    function rebase() public {\r\n        if( epoch.endTime <= block.timestamp ) {\r\n\r\n            IsOHM( sOHM ).rebase( epoch.distribute, epoch.number );\r\n\r\n            epoch.endTime = epoch.endTime.add( epoch.length );\r\n            epoch.number++;\r\n\r\n            if ( distributor != address(0) ) {\r\n                IDistributor( distributor ).distribute();\r\n            }\r\n\r\n            uint balance = contractBalance();\r\n            uint staked = IsOHM( sOHM ).circulatingSupply();\r\n\r\n            if( balance <= staked ) {\r\n                epoch.distribute = 0;\r\n            } else {\r\n                epoch.distribute = balance.sub( staked );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice returns contract OHM holdings, including bonuses provided\r\n        @return uint\r\n     */\r\n    function contractBalance() public view returns ( uint ) {\r\n        return IERC20( OHM ).balanceOf( address(this) ).add( totalBonus );\r\n    }\r\n\r\n    /**\r\n        @notice provide bonus to locked staking contract\r\n        @param _amount uint\r\n     */\r\n    function giveLockBonus( uint _amount ) external {\r\n        require( msg.sender == locker );\r\n        totalBonus = totalBonus.add( _amount );\r\n        IERC20( sOHM ).safeTransfer( locker, _amount );\r\n    }\r\n\r\n    /**\r\n        @notice reclaim bonus from locked staking contract\r\n        @param _amount uint\r\n     */\r\n    function returnLockBonus( uint _amount ) external {\r\n        require( msg.sender == locker );\r\n        totalBonus = totalBonus.sub( _amount );\r\n        IERC20( sOHM ).safeTransferFrom( locker, address(this), _amount );\r\n    }\r\n\r\n    enum CONTRACTS { DISTRIBUTOR, WARMUP, LOCKER }\r\n\r\n    /**\r\n        @notice sets the contract address for LP staking\r\n        @param _contract address\r\n     */\r\n    function setContract( CONTRACTS _contract, address _address ) external onlyManager() {\r\n        if( _contract == CONTRACTS.DISTRIBUTOR ) { // 0\r\n            distributor = _address;\r\n        } else if ( _contract == CONTRACTS.WARMUP ) { // 1\r\n            require( warmupContract == address( 0 ), \"Warmup cannot be set more than once\" );\r\n            warmupContract = _address;\r\n        } else if ( _contract == CONTRACTS.LOCKER ) { // 2\r\n            require( locker == address(0), \"Locker cannot be set more than once\" );\r\n            locker = _address;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice set warmup period for new stakers\r\n     * @param _warmupPeriod uint\r\n     */\r\n    function setWarmup( uint _warmupPeriod ) external onlyManager() {\r\n        warmupPeriod = _warmupPeriod;\r\n    }\r\n}"
    },
    "contracts/StakingDistributor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\npragma solidity 0.7.5;\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n\r\n    function percentageAmount( uint256 total_, uint8 percentage_ ) internal pure returns ( uint256 percentAmount_ ) {\r\n        return div( mul( total_, percentage_ ), 1000 );\r\n    }\r\n\r\n    function substractPercentage( uint256 total_, uint8 percentageToSub_ ) internal pure returns ( uint256 result_ ) {\r\n        return sub( total_, div( mul( total_, percentageToSub_ ), 1000 ) );\r\n    }\r\n\r\n    function percentageOfTotal( uint256 part_, uint256 total_ ) internal pure returns ( uint256 percent_ ) {\r\n        return div( mul(part_, 100) , total_ );\r\n    }\r\n\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    function quadraticPricing( uint256 payment_, uint256 multiplier_ ) internal pure returns (uint256) {\r\n        return sqrrt( mul( multiplier_, payment_ ) );\r\n    }\r\n\r\n  function bondingCurve( uint256 supply_, uint256 multiplier_ ) internal pure returns (uint256) {\r\n      return mul( multiplier_, supply_ );\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\n\r\ninterface IPolicy {\r\n\r\n    function policy() external view returns (address);\r\n\r\n    function renouncePolicy() external;\r\n\r\n    function pushPolicy( address newPolicy_ ) external;\r\n\r\n    function pullPolicy() external;\r\n}\r\n\r\ncontract Policy is IPolicy {\r\n\r\n    address internal _policy;\r\n    address internal _newPolicy;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _policy = msg.sender;\r\n        emit OwnershipTransferred( address(0), _policy );\r\n    }\r\n\r\n    function policy() public view override returns (address) {\r\n        return _policy;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require( _policy == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renouncePolicy() public virtual override onlyPolicy() {\r\n        emit OwnershipTransferred( _policy, address(0) );\r\n        _policy = address(0);\r\n    }\r\n\r\n    function pushPolicy( address newPolicy_ ) public virtual override onlyPolicy() {\r\n        require( newPolicy_ != address(0), \"Ownable: new owner is the zero address\");\r\n        _newPolicy = newPolicy_;\r\n    }\r\n\r\n    function pullPolicy() public virtual override {\r\n        require( msg.sender == _newPolicy );\r\n        emit OwnershipTransferred( _policy, _newPolicy );\r\n        _policy = _newPolicy;\r\n    }\r\n}\r\n\r\ninterface ITreasury {\r\n    function mintRewards( address _recipient, uint _amount ) external;\r\n}\r\n\r\ncontract Distributor is Policy {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n\r\n\r\n    /* ====== VARIABLES ====== */\r\n\r\n    address public immutable OHM;\r\n    address public immutable treasury;\r\n\r\n    uint public immutable epochLength;\r\n    uint public nextEpochTime;\r\n\r\n    mapping( uint => Adjust ) public adjustments;\r\n\r\n\r\n    /* ====== STRUCTS ====== */\r\n\r\n    struct Info {\r\n        uint rate; // in ten-thousandths ( 5000 = 0.5% )\r\n        address recipient;\r\n    }\r\n    Info[] public info;\r\n\r\n    struct Adjust {\r\n        bool add;\r\n        uint rate;\r\n        uint target;\r\n    }\r\n\r\n\r\n\r\n    /* ====== CONSTRUCTOR ====== */\r\n\r\n    constructor( address _treasury, address _ohm, uint _epochLength, uint _nextEpochTime ) {\r\n        require( _treasury != address(0) );\r\n        treasury = _treasury;\r\n        require( _ohm != address(0) );\r\n        OHM = _ohm;\r\n        epochLength = _epochLength;\r\n        nextEpochTime = _nextEpochTime;\r\n    }\r\n\r\n\r\n\r\n    /* ====== PUBLIC FUNCTIONS ====== */\r\n\r\n    /**\r\n        @notice send epoch reward to staking contract\r\n     */\r\n    function distribute() external returns ( bool ) {\r\n        if ( nextEpochTime <= block.timestamp ) {\r\n            nextEpochTime = nextEpochTime.add( epochLength ); // set next epoch time\r\n\r\n            // distribute rewards to each recipient\r\n            for ( uint i = 0; i < info.length; i++ ) {\r\n                if ( info[ i ].rate > 0 ) {\r\n                    ITreasury( treasury ).mintRewards( // mint and send from treasury\r\n                        info[ i ].recipient,\r\n                        nextRewardAt( info[ i ].rate )\r\n                    );\r\n                    adjust( i ); // check for adjustment\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /* ====== INTERNAL FUNCTIONS ====== */\r\n\r\n    /**\r\n        @notice increment reward rate for collector\r\n     */\r\n    function adjust( uint _index ) internal {\r\n        Adjust memory adjustment = adjustments[ _index ];\r\n        if ( adjustment.rate != 0 ) {\r\n            if ( adjustment.add ) { // if rate should increase\r\n                info[ _index ].rate = info[ _index ].rate.add( adjustment.rate ); // raise rate\r\n                if ( info[ _index ].rate >= adjustment.target ) { // if target met\r\n                    adjustments[ _index ].rate = 0; // turn off adjustment\r\n                }\r\n            } else { // if rate should decrease\r\n                info[ _index ].rate = info[ _index ].rate.sub( adjustment.rate ); // lower rate\r\n                if ( info[ _index ].rate <= adjustment.target ) { // if target met\r\n                    adjustments[ _index ].rate = 0; // turn off adjustment\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /* ====== VIEW FUNCTIONS ====== */\r\n\r\n    /**\r\n        @notice view function for next reward at given rate\r\n        @param _rate uint\r\n        @return uint\r\n     */\r\n    function nextRewardAt( uint _rate ) public view returns ( uint ) {\r\n        return IERC20( OHM ).totalSupply().mul( _rate ).div( 1000000 );\r\n    }\r\n\r\n    /**\r\n        @notice view function for next reward for specified address\r\n        @param _recipient address\r\n        @return uint\r\n     */\r\n    function nextRewardFor( address _recipient ) public view returns ( uint ) {\r\n        uint reward;\r\n        for ( uint i = 0; i < info.length; i++ ) {\r\n            if ( info[ i ].recipient == _recipient ) {\r\n                reward = nextRewardAt( info[ i ].rate );\r\n            }\r\n        }\r\n        return reward;\r\n    }\r\n\r\n\r\n\r\n    /* ====== POLICY FUNCTIONS ====== */\r\n\r\n    /**\r\n        @notice adds recipient for distributions\r\n        @param _recipient address\r\n        @param _rewardRate uint\r\n     */\r\n    function addRecipient( address _recipient, uint _rewardRate ) external onlyPolicy() {\r\n        require( _recipient != address(0) );\r\n        info.push( Info({\r\n            recipient: _recipient,\r\n            rate: _rewardRate\r\n        }));\r\n    }\r\n\r\n    /**\r\n        @notice removes recipient for distributions\r\n        @param _index uint\r\n        @param _recipient address\r\n     */\r\n    function removeRecipient( uint _index, address _recipient ) external onlyPolicy() {\r\n        require( _recipient == info[ _index ].recipient );\r\n        info[ _index ].recipient = address(0);\r\n        info[ _index ].rate = 0;\r\n    }\r\n\r\n    /**\r\n        @notice set adjustment info for a collector's reward rate\r\n        @param _index uint\r\n        @param _add bool\r\n        @param _rate uint\r\n        @param _target uint\r\n     */\r\n    function setAdjustment( uint _index, bool _add, uint _rate, uint _target ) external onlyPolicy() {\r\n        adjustments[ _index ] = Adjust({\r\n            add: _add,\r\n            rate: _rate,\r\n            target: _target\r\n        });\r\n    }\r\n}"
    },
    "contracts/StakingHelper.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IStaking {\r\n    function stake( uint _amount, address _recipient ) external returns ( bool );\r\n    function claim( address _recipient ) external;\r\n}\r\n\r\ncontract StakingHelper {\r\n\r\n    address public immutable staking;\r\n    address public immutable OHM;\r\n\r\n    constructor ( address _staking, address _OHM ) {\r\n        require( _staking != address(0) );\r\n        staking = _staking;\r\n        require( _OHM != address(0) );\r\n        OHM = _OHM;\r\n    }\r\n\r\n    function stake( uint _amount ) external {\r\n        IERC20( OHM ).transferFrom( msg.sender, address(this), _amount );\r\n        IERC20( OHM ).approve( staking, _amount );\r\n        IStaking( staking ).stake( _amount, msg.sender );\r\n        IStaking( staking ).claim( msg.sender );\r\n    }\r\n}"
    },
    "contracts/StakingWarmup.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StakingWarmup {\r\n\r\n    address public immutable staking;\r\n    address public immutable sOHM;\r\n\r\n    constructor ( address _staking, address _sOHM ) {\r\n        require( _staking != address(0) );\r\n        staking = _staking;\r\n        require( _sOHM != address(0) );\r\n        sOHM = _sOHM;\r\n    }\r\n\r\n    function retrieve( address _staker, uint _amount ) external {\r\n        require( msg.sender == staking );\r\n        IERC20( sOHM ).transfer( _staker, _amount );\r\n    }\r\n}"
    },
    "contracts/StandardBondingCalculator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function fullDiv(\r\n        uint256 l,\r\n        uint256 h,\r\n        uint256 d\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2 = d & -d;\r\n        d /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        return l * r;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n        uint256 mm = mulmod(x, y, d);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n        require(h < d, 'FullMath::mulDiv: overflow');\r\n        return fullDiv(l, h, d);\r\n    }\r\n}\r\n\r\nlibrary Babylonian {\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256) {\r\n        if (x == 0) return 0;\r\n\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) {\r\n            xx >>= 128;\r\n            r <<= 64;\r\n        }\r\n        if (xx >= 0x10000000000000000) {\r\n            xx >>= 64;\r\n            r <<= 32;\r\n        }\r\n        if (xx >= 0x100000000) {\r\n            xx >>= 32;\r\n            r <<= 16;\r\n        }\r\n        if (xx >= 0x10000) {\r\n            xx >>= 16;\r\n            r <<= 8;\r\n        }\r\n        if (xx >= 0x100) {\r\n            xx >>= 8;\r\n            r <<= 4;\r\n        }\r\n        if (xx >= 0x10) {\r\n            xx >>= 4;\r\n            r <<= 2;\r\n        }\r\n        if (xx >= 0x8) {\r\n            r <<= 1;\r\n        }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return (r < r1 ? r : r1);\r\n    }\r\n}\r\n\r\nlibrary BitMath {\r\n\r\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\r\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\r\n\r\n        if (x >= 0x100000000000000000000000000000000) {\r\n            x >>= 128;\r\n            r += 128;\r\n        }\r\n        if (x >= 0x10000000000000000) {\r\n            x >>= 64;\r\n            r += 64;\r\n        }\r\n        if (x >= 0x100000000) {\r\n            x >>= 32;\r\n            r += 32;\r\n        }\r\n        if (x >= 0x10000) {\r\n            x >>= 16;\r\n            r += 16;\r\n        }\r\n        if (x >= 0x100) {\r\n            x >>= 8;\r\n            r += 8;\r\n        }\r\n        if (x >= 0x10) {\r\n            x >>= 4;\r\n            r += 4;\r\n        }\r\n        if (x >= 0x4) {\r\n            x >>= 2;\r\n            r += 2;\r\n        }\r\n        if (x >= 0x2) r += 1;\r\n    }\r\n}\r\n\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\r\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a uq112x112 into a uint with 18 decimals of precision\r\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\r\n        return uint(self._x) / 5192296858534827;\r\n    }\r\n\r\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\r\n        if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n        if (numerator <= uint144(-1)) {\r\n            uint256 result = (numerator << RESOLUTION) / denominator;\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        } else {\r\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        }\r\n    }\r\n\r\n    // square root of a UQ112x112\r\n    // lossy between 0/1 and 40 bits\r\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        if (self._x <= uint144(-1)) {\r\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\r\n        }\r\n\r\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\r\n        safeShiftBits -= safeShiftBits % 2;\r\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IUniswapV2ERC20 {\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns ( address );\r\n    function token1() external view returns ( address );\r\n}\r\n\r\ninterface IBondingCalculator {\r\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\r\n}\r\n\r\ncontract OlympusBondingCalculator is IBondingCalculator {\r\n\r\n    using FixedPoint for *;\r\n    using SafeMath for uint;\r\n    using SafeMath for uint112;\r\n\r\n    address public immutable OHM;\r\n\r\n    constructor( address _OHM ) {\r\n        require( _OHM != address(0) );\r\n        OHM = _OHM;\r\n    }\r\n\r\n    function getKValue( address _pair ) public view returns( uint k_ ) {\r\n        uint token0 = IERC20( IUniswapV2Pair( _pair ).token0() ).decimals();\r\n        uint token1 = IERC20( IUniswapV2Pair( _pair ).token1() ).decimals();\r\n        uint decimals = token0.add( token1 ).sub( IERC20( _pair ).decimals() );\r\n\r\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair( _pair ).getReserves();\r\n        k_ = reserve0.mul(reserve1).div( 10 ** decimals );\r\n    }\r\n\r\n    function getTotalValue( address _pair ) public view returns ( uint _value ) {\r\n        _value = getKValue( _pair ).sqrrt().mul(2);\r\n    }\r\n\r\n    function valuation( address _pair, uint amount_ ) external view override returns ( uint _value ) {\r\n        uint totalValue = getTotalValue( _pair );\r\n        uint totalSupply = IUniswapV2Pair( _pair ).totalSupply();\r\n\r\n        _value = totalValue.mul( FixedPoint.fraction( amount_, totalSupply ).decode112with18() ).div( 1e18 );\r\n    }\r\n\r\n    function markdown( address _pair ) external view returns ( uint ) {\r\n        ( uint reserve0, uint reserve1, ) = IUniswapV2Pair( _pair ).getReserves();\r\n\r\n        uint reserve;\r\n        if ( IUniswapV2Pair( _pair ).token0() == OHM ) {\r\n            reserve = reserve1;\r\n        } else {\r\n            reserve = reserve0;\r\n        }\r\n        return reserve.mul( 2 * ( 10 ** IERC20( OHM ).decimals() ) ).div( getTotalValue( _pair ) );\r\n    }\r\n}\r\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n  function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IOwnable {\r\n  function manager() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n\r\n  function pushManagement( address newOwner_ ) external;\r\n\r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function manager() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyManager() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n\r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20Mintable {\r\n  function mint( uint256 amount_ ) external;\r\n\r\n  function mint( address account_, uint256 ammount_ ) external;\r\n}\r\n\r\ninterface IOHMERC20 {\r\n    function burnFrom(address account_, uint256 amount_) external;\r\n}\r\n\r\ninterface IBondCalculator {\r\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\r\n}\r\n\r\ncontract OlympusTreasury is Ownable {\r\n\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event Deposit( address indexed token, uint amount, uint value );\r\n    event Withdrawal( address indexed token, uint amount, uint value );\r\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\r\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\r\n    event ReservesManaged( address indexed token, uint amount );\r\n    event ReservesUpdated( uint indexed totalReserves );\r\n    event ReservesAudited( uint indexed totalReserves );\r\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\r\n    event ChangeQueued( MANAGING indexed managing, address queued );\r\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\r\n\r\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SOHM }\r\n\r\n    address public immutable OHM;\r\n    uint public immutable blocksNeededForQueue;\r\n\r\n    address[] public reserveTokens; // Push only, beware false-positives.\r\n    mapping( address => bool ) public isReserveToken;\r\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\r\n\r\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isReserveDepositor;\r\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\r\n\r\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isReserveSpender;\r\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\r\n\r\n    address[] public liquidityTokens; // Push only, beware false-positives.\r\n    mapping( address => bool ) public isLiquidityToken;\r\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\r\n\r\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isLiquidityDepositor;\r\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\r\n\r\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\r\n\r\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isReserveManager;\r\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\r\n\r\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isLiquidityManager;\r\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\r\n\r\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isDebtor;\r\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\r\n    mapping( address => uint ) public debtorBalance;\r\n\r\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isRewardManager;\r\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\r\n\r\n    address public sOHM;\r\n    uint public sOHMQueue; // Delays change to sOHM address\r\n\r\n    uint public totalReserves; // Risk-free value of all assets\r\n    uint public totalDebt;\r\n\r\n    constructor (\r\n        address _OHM,\r\n        address _Frax,\r\n        address _WrappedToken,\r\n        uint _blocksNeededForQueue\r\n    ) {\r\n        require( _OHM != address(0) );\r\n        OHM = _OHM;\r\n\r\n        isReserveToken[ _Frax] = true;\r\n        reserveTokens.push( _Frax );\r\n\r\n        isReserveToken[ _WrappedToken] = true;\r\n        reserveTokens.push( _WrappedToken );\r\n\r\n        blocksNeededForQueue = _blocksNeededForQueue;\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to deposit an asset for OHM\r\n        @param _amount uint\r\n        @param _token address\r\n        @param _profit uint\r\n        @return send_ uint\r\n     */\r\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\r\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \"Not accepted\" );\r\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\r\n\r\n        if ( isReserveToken[ _token ] ) {\r\n            require( isReserveDepositor[ msg.sender ], \"Not approved\" );\r\n        } else {\r\n            require( isLiquidityDepositor[ msg.sender ], \"Not approved\" );\r\n        }\r\n\r\n        uint value = valueOf(_token, _amount);\r\n        // mint OHM needed and store amount of rewards for distribution\r\n        send_ = value.sub( _profit );\r\n        IERC20Mintable( OHM ).mint( msg.sender, send_ );\r\n\r\n        totalReserves = totalReserves.add( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        emit Deposit( _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to burn OHM for reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n    function withdraw( uint _amount, address _token ) external {\r\n        require( isReserveToken[ _token ], \"Not accepted\" ); // Only reserves can be used for redemptions\r\n        require( isReserveSpender[ msg.sender ] == true, \"Not approved\" );\r\n\r\n        uint value = valueOf( _token, _amount );\r\n        IOHMERC20( OHM ).burnFrom( msg.sender, value );\r\n\r\n        totalReserves = totalReserves.sub( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\r\n\r\n        emit Withdrawal( _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to borrow reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n    function incurDebt( uint _amount, address _token ) external {\r\n        require( isDebtor[ msg.sender ], \"Not approved\" );\r\n        require( isReserveToken[ _token ], \"Not accepted\" );\r\n\r\n        uint value = valueOf( _token, _amount );\r\n\r\n        uint maximumDebt = IERC20( sOHM ).balanceOf( msg.sender ); // Can only borrow against sOHM held\r\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\r\n        require( value <= availableDebt, \"Exceeds debt limit\" );\r\n\r\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\r\n        totalDebt = totalDebt.add( value );\r\n\r\n        totalReserves = totalReserves.sub( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        IERC20( _token ).transfer( msg.sender, _amount );\r\n\r\n        emit CreateDebt( msg.sender, _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to repay borrowed reserves with reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n    function repayDebtWithReserve( uint _amount, address _token ) external {\r\n        require( isDebtor[ msg.sender ], \"Not approved\" );\r\n        require( isReserveToken[ _token ], \"Not accepted\" );\r\n\r\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\r\n\r\n        uint value = valueOf( _token, _amount );\r\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\r\n        totalDebt = totalDebt.sub( value );\r\n\r\n        totalReserves = totalReserves.add( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        emit RepayDebt( msg.sender, _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to repay borrowed reserves with OHM\r\n        @param _amount uint\r\n     */\r\n    function repayDebtWithOHM( uint _amount ) external {\r\n        require( isDebtor[ msg.sender ], \"Not approved\" );\r\n\r\n        IOHMERC20( OHM ).burnFrom( msg.sender, _amount );\r\n\r\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\r\n        totalDebt = totalDebt.sub( _amount );\r\n\r\n        emit RepayDebt( msg.sender, OHM, _amount, _amount );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to withdraw assets\r\n        @param _token address\r\n        @param _amount uint\r\n     */\r\n    function manage( address _token, uint _amount ) external {\r\n        if( isLiquidityToken[ _token ] ) {\r\n            require( isLiquidityManager[ msg.sender ], \"Not approved\" );\r\n        } else {\r\n            require( isReserveManager[ msg.sender ], \"Not approved\" );\r\n        }\r\n\r\n        uint value = valueOf(_token, _amount);\r\n        require( value <= excessReserves(), \"Insufficient reserves\" );\r\n\r\n        totalReserves = totalReserves.sub( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\r\n\r\n        emit ReservesManaged( _token, _amount );\r\n    }\r\n\r\n    /**\r\n        @notice send epoch reward to staking contract\r\n     */\r\n    function mintRewards( address _recipient, uint _amount ) external {\r\n        require( isRewardManager[ msg.sender ], \"Not approved\" );\r\n        require( _amount <= excessReserves(), \"Insufficient reserves\" );\r\n\r\n        IERC20Mintable( OHM ).mint( _recipient, _amount );\r\n\r\n        emit RewardsMinted( msg.sender, _recipient, _amount );\r\n    }\r\n\r\n    /**\r\n        @notice returns excess reserves not backing tokens\r\n        @return uint\r\n     */\r\n    function excessReserves() public view returns ( uint ) {\r\n        return totalReserves.sub( IERC20( OHM ).totalSupply().sub( totalDebt ) );\r\n    }\r\n\r\n    /**\r\n        @notice takes inventory of all tracked assets\r\n        @notice always consolidate to recognized reserves before audit\r\n     */\r\n    function auditReserves() external onlyManager() {\r\n        uint reserves;\r\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\r\n            reserves = reserves.add (\r\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\r\n            );\r\n        }\r\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\r\n            reserves = reserves.add (\r\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\r\n            );\r\n        }\r\n        totalReserves = reserves;\r\n        emit ReservesUpdated( reserves );\r\n        emit ReservesAudited( reserves );\r\n    }\r\n\r\n    /**\r\n        @notice returns OHM valuation of asset\r\n        @param _token address\r\n        @param _amount uint\r\n        @return value_ uint\r\n     */\r\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\r\n        if ( isReserveToken[ _token ] ) {\r\n            // convert amount to match OHM decimals\r\n            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\r\n        } else if ( isLiquidityToken[ _token ] ) {\r\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice queue address to change boolean in mapping\r\n        @param _managing MANAGING\r\n        @param _address address\r\n        @return bool\r\n     */\r\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\r\n        require( _address != address(0) );\r\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\r\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\r\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\r\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\r\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\r\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\r\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\r\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\r\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\r\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\r\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\r\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.SOHM ) { // 9\r\n            sOHMQueue = block.number.add( blocksNeededForQueue );\r\n        } else return false;\r\n\r\n        emit ChangeQueued( _managing, _address );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice verify queue then set boolean in mapping\r\n        @param _managing MANAGING\r\n        @param _address address\r\n        @param _calculator address\r\n        @return bool\r\n     */\r\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\r\n        require( _address != address(0) );\r\n        bool result;\r\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\r\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\r\n                reserveDepositorQueue[ _address ] = 0;\r\n                if( !listContains( reserveDepositors, _address ) ) {\r\n                    reserveDepositors.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveDepositor[ _address ];\r\n            isReserveDepositor[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\r\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\r\n                reserveSpenderQueue[ _address ] = 0;\r\n                if( !listContains( reserveSpenders, _address ) ) {\r\n                    reserveSpenders.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveSpender[ _address ];\r\n            isReserveSpender[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\r\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\r\n                reserveTokenQueue[ _address ] = 0;\r\n                if( !listContains( reserveTokens, _address ) ) {\r\n                    reserveTokens.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveToken[ _address ];\r\n            isReserveToken[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\r\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\r\n                reserveManagers.push( _address );\r\n                ReserveManagerQueue[ _address ] = 0;\r\n                if( !listContains( reserveManagers, _address ) ) {\r\n                    reserveManagers.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveManager[ _address ];\r\n            isReserveManager[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\r\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\r\n                liquidityDepositors.push( _address );\r\n                LiquidityDepositorQueue[ _address ] = 0;\r\n                if( !listContains( liquidityDepositors, _address ) ) {\r\n                    liquidityDepositors.push( _address );\r\n                }\r\n            }\r\n            result = !isLiquidityDepositor[ _address ];\r\n            isLiquidityDepositor[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\r\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\r\n                LiquidityTokenQueue[ _address ] = 0;\r\n                if( !listContains( liquidityTokens, _address ) ) {\r\n                    liquidityTokens.push( _address );\r\n                }\r\n            }\r\n            result = !isLiquidityToken[ _address ];\r\n            isLiquidityToken[ _address ] = result;\r\n            bondCalculator[ _address ] = _calculator;\r\n\r\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\r\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\r\n                LiquidityManagerQueue[ _address ] = 0;\r\n                if( !listContains( liquidityManagers, _address ) ) {\r\n                    liquidityManagers.push( _address );\r\n                }\r\n            }\r\n            result = !isLiquidityManager[ _address ];\r\n            isLiquidityManager[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\r\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\r\n                debtorQueue[ _address ] = 0;\r\n                if( !listContains( debtors, _address ) ) {\r\n                    debtors.push( _address );\r\n                }\r\n            }\r\n            result = !isDebtor[ _address ];\r\n            isDebtor[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\r\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\r\n                rewardManagerQueue[ _address ] = 0;\r\n                if( !listContains( rewardManagers, _address ) ) {\r\n                    rewardManagers.push( _address );\r\n                }\r\n            }\r\n            result = !isRewardManager[ _address ];\r\n            isRewardManager[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.SOHM ) { // 9\r\n            sOHMQueue = 0;\r\n            sOHM = _address;\r\n            result = true;\r\n\r\n        } else return false;\r\n\r\n        emit ChangeActivated( _managing, _address, result );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice checks requirements and returns altered structs\r\n        @param queue_ mapping( address => uint )\r\n        @param status_ mapping( address => bool )\r\n        @param _address address\r\n        @return bool\r\n     */\r\n    function requirements(\r\n        mapping( address => uint ) storage queue_,\r\n        mapping( address => bool ) storage status_,\r\n        address _address\r\n    ) internal view returns ( bool ) {\r\n        if ( !status_[ _address ] ) {\r\n            require( queue_[ _address ] != 0, \"Must queue\" );\r\n            require( queue_[ _address ] <= block.number, \"Queue not expired\" );\r\n            return true;\r\n        } return false;\r\n    }\r\n\r\n    /**\r\n        @notice checks array to ensure against duplicate\r\n        @param _list address[]\r\n        @param _token address\r\n        @return bool\r\n     */\r\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\r\n        for( uint i = 0; i < _list.length; i++ ) {\r\n            if( _list[ i ] == _token ) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}"
    },
    "contracts/wETHBondDepository.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n  function policy() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function policy() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyPolicy() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ERC20 is IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // TODO comment actual hash value.\r\n    bytes32 constant private ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256( \"ERC20Token\" );\r\n    \r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string internal _name;\r\n    \r\n    string internal _symbol;\r\n    \r\n    uint8 internal _decimals;\r\n\r\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account_, uint256 ammount_) internal virtual {\r\n        require(account_ != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address( this ), account_, ammount_);\r\n        _totalSupply = _totalSupply.add(ammount_);\r\n        _balances[account_] = _balances[account_].add(ammount_);\r\n        emit Transfer(address( this ), account_, ammount_);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n  function _beforeTokenTransfer( address from_, address to_, uint256 amount_ ) internal virtual { }\r\n}\r\n\r\ninterface IERC2612Permit {\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\r\n    using Counters for Counters.Counter;\r\n\r\n    mapping(address => Counters.Counter) private _nonces;\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    constructor() {\r\n        uint256 chainID;\r\n        assembly {\r\n            chainID := chainid()\r\n        }\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name())),\r\n                keccak256(bytes(\"1\")), // Version\r\n                chainID,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual override {\r\n        require(block.timestamp <= deadline, \"Permit: expired deadline\");\r\n\r\n        bytes32 hashStruct =\r\n            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline));\r\n\r\n        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\r\n\r\n        address signer = ecrecover(_hash, v, r, s);\r\n        require(signer != address(0) && signer == owner, \"ZeroSwapPermit: Invalid signature\");\r\n\r\n        _nonces[owner].increment();\r\n        _approve(owner, spender, amount);\r\n    }\r\n\r\n    function nonces(address owner) public view override returns (uint256) {\r\n        return _nonces[owner].current();\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function fullDiv(\r\n        uint256 l,\r\n        uint256 h,\r\n        uint256 d\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2 = d & -d;\r\n        d /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        return l * r;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n        uint256 mm = mulmod(x, y, d);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n        require(h < d, 'FullMath::mulDiv: overflow');\r\n        return fullDiv(l, h, d);\r\n    }\r\n}\r\n\r\nlibrary FixedPoint {\r\n\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\r\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\r\n\r\n        return uint(self._x) / 5192296858534827;\r\n    }\r\n\r\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\r\n        if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n        if (numerator <= uint144(-1)) {\r\n            uint256 result = (numerator << RESOLUTION) / denominator;\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        } else {\r\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        }\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\ninterface ITreasury {\r\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( bool );\r\n    function valueOf( address _token, uint _amount ) external view returns ( uint value_ );\r\n    function mintRewards( address _recipient, uint _amount ) external;\r\n}\r\n\r\ninterface IStaking {\r\n    function stake( uint _amount, address _recipient ) external returns ( bool );\r\n}\r\n\r\ninterface IStakingHelper {\r\n    function stake( uint _amount, address _recipient ) external;\r\n}\r\n\r\ncontract OlympusBondDepository is Ownable {\r\n\r\n    using FixedPoint for *;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n\r\n\r\n\r\n    /* ======== EVENTS ======== */\r\n\r\n    event BondCreated( uint deposit, uint indexed payout, uint indexed expires, uint indexed priceInUSD );\r\n    event BondRedeemed( address indexed recipient, uint payout, uint remaining );\r\n    event BondPriceChanged( uint indexed priceInUSD, uint indexed internalPrice, uint indexed debtRatio );\r\n    event ControlVariableAdjustment( uint initialBCV, uint newBCV, uint adjustment, bool addition );\r\n\r\n\r\n\r\n\r\n    /* ======== STATE VARIABLES ======== */\r\n\r\n    address public immutable OHM; // token given as payment for bond\r\n    address public immutable principle; // token used to create bond\r\n    address public immutable treasury; // mints OHM when receives principle\r\n    address public immutable DAO; // receives profit share from bond\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    address public staking; // to auto-stake payout\r\n    address public stakingHelper; // to stake and claim if no staking warmup\r\n    bool public useHelper;\r\n\r\n    Terms public terms; // stores terms for new bonds\r\n    Adjust public adjustment; // stores adjustment to BCV data\r\n\r\n    mapping( address => Bond ) public bondInfo; // stores bond information for depositors\r\n\r\n    uint public totalDebt; // total value of outstanding bonds; used for pricing\r\n    uint public lastDecay; // reference time for debt decay\r\n\r\n\r\n\r\n\r\n    /* ======== STRUCTS ======== */\r\n\r\n    // Info for creating new bonds\r\n    struct Terms {\r\n        uint controlVariable; // scaling variable for price\r\n        uint vestingTerm; // in seconds\r\n        uint minimumPrice; // vs principle value. 4 decimals (1500 = 0.15)\r\n        uint maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\r\n        uint maxDebt; // 9 decimal debt ratio, max % total supply created as debt\r\n    }\r\n\r\n    // Info for bond holder\r\n    struct Bond {\r\n        uint payout; // OHM remaining to be paid\r\n        uint vesting; // seconds left to vest\r\n        uint lastTime; // Last interaction\r\n        uint pricePaid; // In DAI, for front end viewing\r\n    }\r\n\r\n    // Info for incremental adjustments to control variable\r\n    struct Adjust {\r\n        bool add; // addition or subtraction\r\n        uint rate; // increment\r\n        uint target; // BCV when adjustment finished\r\n        uint buffer; // minimum length (in seconds) between adjustments\r\n        uint lastTime; // time when last adjustment made\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ======== INITIALIZATION ======== */\r\n\r\n    constructor ( \r\n        address _OHM,\r\n        address _principle,\r\n        address _treasury, \r\n        address _DAO,\r\n        address _feed\r\n    ) {\r\n        require( _OHM != address(0) );\r\n        OHM = _OHM;\r\n        require( _principle != address(0) );\r\n        principle = _principle;\r\n        require( _treasury != address(0) );\r\n        treasury = _treasury;\r\n        require( _DAO != address(0) );\r\n        DAO = _DAO;\r\n        require( _feed != address(0) );\r\n        priceFeed = AggregatorV3Interface( _feed );\r\n    }\r\n\r\n    /**\r\n     *  @notice initializes bond parameters\r\n     *  @param _controlVariable uint\r\n     *  @param _vestingTerm uint\r\n     *  @param _minimumPrice uint\r\n     *  @param _maxPayout uint\r\n     *  @param _maxDebt uint\r\n     *  @param _initialDebt uint\r\n     */\r\n    function initializeBondTerms( \r\n        uint _controlVariable, \r\n        uint _vestingTerm,\r\n        uint _minimumPrice,\r\n        uint _maxPayout,\r\n        uint _maxDebt,\r\n        uint _initialDebt\r\n    ) external onlyPolicy() {\r\n        require( currentDebt() == 0, \"Debt must be 0 for initialization\" );\r\n        terms = Terms ({\r\n            controlVariable: _controlVariable,\r\n            vestingTerm: _vestingTerm,\r\n            minimumPrice: _minimumPrice,\r\n            maxPayout: _maxPayout,\r\n            maxDebt: _maxDebt\r\n        });\r\n        totalDebt = _initialDebt;\r\n        lastDecay = block.timestamp;\r\n    }\r\n\r\n\r\n\r\n    \r\n    /* ======== POLICY FUNCTIONS ======== */\r\n\r\n    enum PARAMETER { VESTING, PAYOUT, DEBT }\r\n    /**\r\n     *  @notice set parameters for new bonds\r\n     *  @param _parameter PARAMETER\r\n     *  @param _input uint\r\n     */\r\n    function setBondTerms ( PARAMETER _parameter, uint _input ) external onlyPolicy() {\r\n        if ( _parameter == PARAMETER.VESTING ) { // 0\r\n            require( _input >= 129600, \"Vesting must be longer than 36 hours\" );\r\n            terms.vestingTerm = _input;\r\n        } else if ( _parameter == PARAMETER.PAYOUT ) { // 1\r\n            require( _input <= 1000, \"Payout cannot be above 1 percent\" );\r\n            terms.maxPayout = _input;\r\n        } else if ( _parameter == PARAMETER.DEBT ) { // 3\r\n            terms.maxDebt = _input;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice set control variable adjustment\r\n     *  @param _addition bool\r\n     *  @param _increment uint\r\n     *  @param _target uint\r\n     *  @param _buffer uint\r\n     */\r\n    function setAdjustment ( \r\n        bool _addition,\r\n        uint _increment, \r\n        uint _target,\r\n        uint _buffer \r\n    ) external onlyPolicy() {\r\n        require( _increment <= terms.controlVariable.mul( 25 ).div( 1000 ), \"Increment too large\" );\r\n\r\n        adjustment = Adjust({\r\n            add: _addition,\r\n            rate: _increment,\r\n            target: _target,\r\n            buffer: _buffer,\r\n            lastTime: block.timestamp\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  @notice set contract for auto stake\r\n     *  @param _staking address\r\n     *  @param _helper bool\r\n     */\r\n    function setStaking( address _staking, bool _helper ) external onlyPolicy() {\r\n        require( _staking != address(0) );\r\n        if ( _helper ) {\r\n            useHelper = true;\r\n            stakingHelper = _staking;\r\n        } else {\r\n            useHelper = false;\r\n            staking = _staking;\r\n        }\r\n    }\r\n\r\n\r\n    \r\n\r\n    /* ======== USER FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice deposit bond\r\n     *  @param _amount uint\r\n     *  @param _maxPrice uint\r\n     *  @param _depositor address\r\n     *  @return uint\r\n     */\r\n    function deposit( \r\n        uint _amount, \r\n        uint _maxPrice,\r\n        address _depositor\r\n    ) external returns ( uint ) {\r\n        require( _depositor != address(0), \"Invalid address\" );\r\n\r\n        decayDebt();\r\n        require( totalDebt <= terms.maxDebt, \"Max capacity reached\" );\r\n        \r\n        uint priceInUSD = bondPriceInUSD(); // Stored in bond info\r\n        uint nativePrice = _bondPrice();\r\n\r\n        require( _maxPrice >= nativePrice, \"Slippage limit: more than max price\" ); // slippage protection\r\n\r\n        uint value = ITreasury( treasury ).valueOf( principle, _amount );\r\n        uint payout = payoutFor( value ); // payout to bonder is computed\r\n\r\n        require( payout >= 10000000, \"Bond too small\" ); // must be > 0.01 OHM ( underflow protection )\r\n        require( payout <= maxPayout(), \"Bond too large\"); // size protection because there is no slippage\r\n\r\n        /**\r\n            asset carries risk and is not minted against\r\n            asset transfered to treasury and rewards minted as payout\r\n         */\r\n        IERC20( principle ).safeTransferFrom( msg.sender, treasury, _amount );\r\n        ITreasury( treasury ).mintRewards( address(this), payout );\r\n        \r\n        // total debt is increased\r\n        totalDebt = totalDebt.add( value ); \r\n                \r\n        // depositor info is stored\r\n        bondInfo[ _depositor ] = Bond({ \r\n            payout: bondInfo[ _depositor ].payout.add( payout ),\r\n            vesting: terms.vestingTerm,\r\n            lastTime: block.timestamp,\r\n            pricePaid: priceInUSD\r\n        });\r\n\r\n        // indexed events are emitted\r\n        emit BondCreated( _amount, payout, block.timestamp.add( terms.vestingTerm ), priceInUSD );\r\n        emit BondPriceChanged( bondPriceInUSD(), _bondPrice(), debtRatio() );\r\n\r\n        adjust(); // control variable is adjusted\r\n        return payout; \r\n    }\r\n\r\n    /** \r\n     *  @notice redeem bond for user\r\n     *  @param _recipient address\r\n     *  @param _stake bool\r\n     *  @return uint\r\n     */ \r\n    function redeem( address _recipient, bool _stake ) external returns ( uint ) {        \r\n        Bond memory info = bondInfo[ _recipient ];\r\n        uint percentVested = percentVestedFor( _recipient ); // (time since last interaction / vesting term remaining)\r\n\r\n        if ( percentVested >= 10000 ) { // if fully vested\r\n            delete bondInfo[ _recipient ]; // delete user info\r\n            emit BondRedeemed( _recipient, info.payout, 0 ); // emit bond data\r\n            return stakeOrSend( _recipient, _stake, info.payout ); // pay user everything due\r\n\r\n        } else { // if unfinished\r\n            // calculate payout vested\r\n            uint payout = info.payout.mul( percentVested ).div( 10000 );\r\n\r\n            // store updated deposit info\r\n            bondInfo[ _recipient ] = Bond({\r\n                payout: info.payout.sub( payout ),\r\n                vesting: info.vesting.sub( block.timestamp.sub( info.lastTime ) ),\r\n                lastTime: block.timestamp,\r\n                pricePaid: info.pricePaid\r\n            });\r\n\r\n            emit BondRedeemed( _recipient, payout, bondInfo[ _recipient ].payout );\r\n            return stakeOrSend( _recipient, _stake, payout );\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice allow user to stake payout automatically\r\n     *  @param _stake bool\r\n     *  @param _amount uint\r\n     *  @return uint\r\n     */\r\n    function stakeOrSend( address _recipient, bool _stake, uint _amount ) internal returns ( uint ) {\r\n        if ( !_stake ) { // if user does not want to stake\r\n            IERC20( OHM ).transfer( _recipient, _amount ); // send payout\r\n        } else { // if user wants to stake\r\n            if ( useHelper ) { // use if staking warmup is 0\r\n                IERC20( OHM ).approve( stakingHelper, _amount );\r\n                IStakingHelper( stakingHelper ).stake( _amount, _recipient );\r\n            } else {\r\n                IERC20( OHM ).approve( staking, _amount );\r\n                IStaking( staking ).stake( _amount, _recipient );\r\n            }\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n     *  @notice makes incremental adjustment to control variable\r\n     */\r\n    function adjust() internal {\r\n        uint timeCanAdjust = adjustment.lastTime.add( adjustment.buffer );\r\n        if( adjustment.rate != 0 && block.timestamp >= timeCanAdjust ) {\r\n            uint initial = terms.controlVariable;\r\n            if ( adjustment.add ) {\r\n                terms.controlVariable = terms.controlVariable.add( adjustment.rate );\r\n                if ( terms.controlVariable >= adjustment.target ) {\r\n                    adjustment.rate = 0;\r\n                }\r\n            } else {\r\n                terms.controlVariable = terms.controlVariable.sub( adjustment.rate );\r\n                if ( terms.controlVariable <= adjustment.target ) {\r\n                    adjustment.rate = 0;\r\n                }\r\n            }\r\n            adjustment.lastTime = block.timestamp;\r\n            emit ControlVariableAdjustment( initial, terms.controlVariable, adjustment.rate, adjustment.add );\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice reduce total debt\r\n     */\r\n    function decayDebt() internal {\r\n        totalDebt = totalDebt.sub( debtDecay() );\r\n        lastDecay = block.timestamp;\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ======== VIEW FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice determine maximum bond size\r\n     *  @return uint\r\n     */\r\n    function maxPayout() public view returns ( uint ) {\r\n        return IERC20( OHM ).totalSupply().mul( terms.maxPayout ).div( 100000 );\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate interest due for new bond\r\n     *  @param _value uint\r\n     *  @return uint\r\n     */\r\n    function payoutFor( uint _value ) public view returns ( uint ) {\r\n        return FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e14 );\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate current bond premium\r\n     *  @return price_ uint\r\n     */\r\n    function bondPrice() public view returns ( uint price_ ) {        \r\n        price_ = terms.controlVariable.mul( debtRatio() ).div( 1e5 );\r\n        if ( price_ < terms.minimumPrice ) {\r\n            price_ = terms.minimumPrice;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate current bond price and remove floor if above\r\n     *  @return price_ uint\r\n     */\r\n    function _bondPrice() internal returns ( uint price_ ) {\r\n        price_ = terms.controlVariable.mul( debtRatio() ).div( 1e5 );\r\n        if ( price_ < terms.minimumPrice ) {\r\n            price_ = terms.minimumPrice;        \r\n        } else if ( terms.minimumPrice != 0 ) {\r\n            terms.minimumPrice = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice get asset price from chainlink\r\n     */\r\n    function assetPrice() public view returns (int) {\r\n        ( , int price, , , ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n\r\n    /**\r\n     *  @notice converts bond price to DAI value\r\n     *  @return price_ uint\r\n     */\r\n    function bondPriceInUSD() public view returns ( uint price_ ) {\r\n        price_ = bondPrice().mul( uint( assetPrice() ) ).mul( 1e6 );\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate current ratio of debt to OHM supply\r\n     *  @return debtRatio_ uint\r\n     */\r\n    function debtRatio() public view returns ( uint debtRatio_ ) {   \r\n        uint supply = IERC20( OHM ).totalSupply();\r\n        debtRatio_ = FixedPoint.fraction( \r\n            currentDebt().mul( 1e9 ), \r\n            supply\r\n        ).decode112with18().div( 1e18 );\r\n    }\r\n\r\n    /**\r\n     *  @notice debt ratio in same terms as reserve bonds\r\n     *  @return uint\r\n     */\r\n    function standardizedDebtRatio() external view returns ( uint ) {\r\n        return debtRatio().mul( uint( assetPrice() ) ).div( 1e8 ); // ETH feed is 8 decimals\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate debt factoring in decay\r\n     *  @return uint\r\n     */\r\n    function currentDebt() public view returns ( uint ) {\r\n        return totalDebt.sub( debtDecay() );\r\n    }\r\n\r\n    /**\r\n     *  @notice amount to decay total debt by\r\n     *  @return decay_ uint\r\n     */\r\n    function debtDecay() public view returns ( uint decay_ ) {\r\n        uint timeSinceLast = block.timestamp.sub( lastDecay );\r\n        decay_ = totalDebt.mul( timeSinceLast ).div( terms.vestingTerm );\r\n        if ( decay_ > totalDebt ) {\r\n            decay_ = totalDebt;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate how far into vesting a depositor is\r\n     *  @param _depositor address\r\n     *  @return percentVested_ uint\r\n     */\r\n    function percentVestedFor( address _depositor ) public view returns ( uint percentVested_ ) {\r\n        Bond memory bond = bondInfo[ _depositor ];\r\n        uint timeSinceLast = block.timestamp.sub( bond.lastTime );\r\n        uint vesting = bond.vesting;\r\n\r\n        if ( vesting > 0 ) {\r\n            percentVested_ = timeSinceLast.mul( 10000 ).div( vesting );\r\n        } else {\r\n            percentVested_ = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate amount of OHM available for claim by depositor\r\n     *  @param _depositor address\r\n     *  @return pendingPayout_ uint\r\n     */\r\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ ) {\r\n        uint percentVested = percentVestedFor( _depositor );\r\n        uint payout = bondInfo[ _depositor ].payout;\r\n\r\n        if ( percentVested >= 10000 ) {\r\n            pendingPayout_ = payout;\r\n        } else {\r\n            pendingPayout_ = payout.mul( percentVested ).div( 10000 );\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ======= AUXILLIARY ======= */\r\n\r\n    /**\r\n     *  @notice allow anyone to send lost tokens (excluding principle or OHM) to the DAO\r\n     *  @return bool\r\n     */\r\n    function recoverLostToken( address _token ) external returns ( bool ) {\r\n        require( _token != OHM );\r\n        require( _token != principle );\r\n        IERC20( _token ).safeTransfer( DAO, IERC20( _token ).balanceOf( address(this) ) );\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/wOHM.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IStaking {\r\n    function stake( uint _amount, address _recipient ) external returns ( bool );\r\n\r\n    function unstake( uint _amount, address _recipient ) external returns ( bool );\r\n\r\n    function index() external view returns ( uint );\r\n}\r\n\r\ncontract wOHM is ERC20 {\r\n    using SafeERC20 for ERC20;\r\n    using Address for address;\r\n    using SafeMath for uint;\r\n\r\n    address public immutable staking;\r\n    address public immutable OHM;\r\n    address public immutable sOHM;\r\n\r\n    constructor( address _staking, address _OHM, address _sOHM, string memory _name, string memory _symbol ) ERC20( _name, _symbol ) {\r\n        require( _staking != address(0) );\r\n        staking = _staking;\r\n        require( _OHM != address(0) );\r\n        OHM = _OHM;\r\n        require( _sOHM != address(0) );\r\n        sOHM = _sOHM;\r\n    }\r\n\r\n        /**\r\n        @notice stakes OHM and wraps sOHM\r\n        @param _amount uint\r\n        @return uint\r\n     */\r\n    function wrapFromOHM( uint _amount ) external returns ( uint ) {\r\n        IERC20( OHM ).transferFrom( msg.sender, address(this), _amount );\r\n\r\n        IERC20( OHM ).approve( staking, _amount ); // stake OHM for sOHM\r\n        IStaking( staking ).stake( _amount, address(this) );\r\n\r\n        uint value = wOHMValue( _amount );\r\n        _mint( msg.sender, value );\r\n        return value;\r\n    }\r\n\r\n    /**\r\n        @notice unwrap sOHM and unstake OHM\r\n        @param _amount uint\r\n        @return uint\r\n     */\r\n    function unwrapToOHM( uint _amount ) external returns ( uint ) {\r\n        _burn( msg.sender, _amount );\r\n\r\n        uint value = sOHMValue( _amount );\r\n        IERC20( sOHM ).approve( staking, value ); // unstake sOHM for OHM\r\n        IStaking( staking ).unstake( value, address(this) );\r\n\r\n        IERC20( OHM ).transfer( msg.sender, value );\r\n        return value;\r\n    }\r\n\r\n    /**\r\n        @notice wrap sOHM\r\n        @param _amount uint\r\n        @return uint\r\n     */\r\n    function wrapFromsOHM( uint _amount ) external returns ( uint ) {\r\n        IERC20( sOHM ).transferFrom( msg.sender, address(this), _amount );\r\n\r\n        uint value = wOHMValue( _amount );\r\n        _mint( msg.sender, value );\r\n        return value;\r\n    }\r\n\r\n    /**\r\n        @notice unwrap sOHM\r\n        @param _amount uint\r\n        @return uint\r\n     */\r\n    function unwrapTosOHM( uint _amount ) external returns ( uint ) {\r\n        _burn( msg.sender, _amount );\r\n\r\n        uint value = sOHMValue( _amount );\r\n        IERC20( sOHM ).transfer( msg.sender, value );\r\n        return value;\r\n    }\r\n\r\n    /**\r\n        @notice converts wOHM amount to sOHM\r\n        @param _amount uint\r\n        @return uint\r\n     */\r\n    function sOHMValue( uint _amount ) public view returns ( uint ) {\r\n        return _amount.mul( IStaking( staking ).index() ).div( 10 ** decimals() );\r\n    }\r\n\r\n    /**\r\n        @notice converts sOHM amount to wOHM\r\n        @param _amount uint\r\n        @return uint\r\n     */\r\n    function wOHMValue( uint _amount ) public view returns ( uint ) {\r\n        return _amount.mul( 10 ** decimals() ).div( IStaking( staking ).index() );\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}